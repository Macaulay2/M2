# @configure_input@
# to avoiding tidying, run "make -o tidy"
include ../../include/config.Makefile
VPATH = @srcdir@
DEPENDS = yes
PKG_DMG = @package@-@ARCH@-@ISSUE@.dmg

all: dmg tidy
.PRECIOUS dmg: ../../$(PKG_DMG)

T=@TAR@ --create --mode=a+rX,og-ws --exclude-from=@srcdir@/../tar-exclusions --file=-

# In the following, we have to admit errors saying "is already signed", because some of our binary files have multiple links to them from directories.
../../$(PKG_DMG) : Makefile always check-prerequisites file_preparation library_preparation top-directory-preparation
	rm -f "$@"
ifeq ($(SIGN),yes)
	@for i in files/@package@/@tail_bindir@/* files/@package@/@tail_programsdir@/* files/@package@/@tail_libdir@/*dylib ;			\
	 do if test -f "$$i" ;															\
	    then (set -x ; codesign --timestamp -o runtime -v -s "Developer ID Application: Daniel Grayson (C7RV9R283Q)" "$$i" 2>error.log) ;	\
		 if test $$? != 0 ;														\
		 then cat error.log ;														\
		      ! grep --silent "is already signed" error.log && exit 1 ;									\
		 fi ;																\
	    fi;																	\
	 done
endif
	@echo "warning: sometimes the following command gives a mystical error message about '(ipc/send) invalid destination port' ... "
	hdiutil create -srcfolder files -volname "@package@-@ARCH@-@OS@-@REL@" "$@"
ifeq ($(SIGN),yes)
	codesign --timestamp -o runtime -v -s "Developer ID Application: Daniel Grayson (C7RV9R283Q)" "$@"
	xcrun altool --notarize-app --primary-bundle-id "notarize-bar.dmg" --username danielrichardgrayson@gmail.com --password "@keychain:AC_PASSWORD" --file "$@"
	: : : : now wait for confirmation of success of notarization to arrive by email, then press EOF : : : : : : : : : : : :
	read
	stapler staple "$@"
endif

check-prerequisites:
	for i in @FILE_PREREQS@ ; do echo "error: *** files are required (provide --enable-dmg to configure)" >&2 ; exit 1 ; done
top-directory-preparation:
	umask 022 ; $(MKDIR_P) files
	ln -sf /Applications files/.
file_preparation: always
	rm -rf files
	umask 022 ; $(MKDIR_P) files/@package@
	umask 022 ; $(T) -C @pre_exec_prefix@ . | @TAR@ xfp - -C files/@package@
	umask 022 ; $(T) -C @pre_prefix@ . | @TAR@ xfp - -C files/@package@
	set -e; cd files/@package@/@tail_infodir@; for p in @PACKAGES@; do install-info --info-dir=. "$$p.info"; done
	cp @srcdir@/ReadMe-MacOSX.rtf files/@package@
	ln -s @package@/ReadMe-MacOSX.rtf files

# Sadly, the number of "../"s in the install_name_tool commands below depends on the particular Macaulay2 Layout.
# The dynamic libraries we might need to relocate are these: libstdc++.6.dylib libgcc_s.1.dylib
# and that's only if we compile with a non-system build of gcc.
# Three symbolic prefixes for finding a library :
#     @executable_path : relative to the path to the executable
#     @loader_path     : relative to the path to the library that wants the library
#     @rpath           : relative to any path installed on the path with the -rpath option to ld
# Read about all that with "man dyld".

# We used to remap binaries using the dynamic libraries that are not part of the OS to point to the copy we provide
# in the disk image file by using "@executable_path", but such binaries are not acceptable to "gatekeeper", which is responsible
# for deciding whether a program about to run is trusted.  So now we just signal an error, instead.  Normal users don't make disk image

# distributions, so it will only be the Macaulay2 maintainers who have to deal with such errors.  We hope.
# Meanwhile, there is no good way to tell the linker to ignore dynamic libraries when linking with libraries
# provided by homebrew, so what I do is 'rm /usr/local/lib/*.dylib'.  Hah!
library_preparation: file_preparation
	$(MKDIR_P) files/@package@/@tail_libdir@

	( set -e;											\
	  for i in files/@package@/@tail_bindir@/* files/@package@/@tail_programsdir@/* ;		\
	  do if [ -f $$i -a -x $$i -a ! -h $$i ] ;							\
	     then otool -L $$i | grep '^\t' | grep -v '^[[:space:]]*\(/usr/lib/\|/System/Library/\)'	\
		  | sed 's/^[[:space:]]*\(.*\) (compatibility version .*/\1/'				\
		  | while read f;									\
		    do echo "library preparation: error *** : file $$i uses dynamic library $$f" >&2;	\
		       exit 1;										\
		       done ;										\
	     fi ;											\
	  done												\
	) >libraries.tmp ;

	<libraries.tmp												\
	  | sort												\
	  | uniq												\
	  | while read f; do ls -l $$f ; (set -x ; @INSTALL_PROGRAM@ $$f files/@package@/@tail_libdir@ ) ; done

	for i in files/@package@/@tail_libdir@/* ;							\
	do if [ -f $$i -a -x $$i -a ! -h $$i ] ;							\
	   then otool -L $$i | grep '^\t' | grep -v '^[[:space:]]*\(/usr/lib/\|/System/Library/\)'	\
		| sed 's/^[[:space:]]*\(.*\) (compatibility version .*/\1/'				\
		| while read f;										\
		  do (bf=`basename $$f` ;								\
		      bi=`basename $$i` ;								\
		      set -x ;										\
		      if [ $$bf = $$bi ] ;								\
		      then set -xe ; install_name_tool -id $$bi $$i ;					\
		      else set -xe ; install_name_tool -change $$f @loader_path/$$bf $$i ;		\
		      fi ) || exit 1 ;									\
		     echo $$f ;										\
		     done ;										\
	   fi ;												\
	done

	: dynamic libraries to be distributed:
	cd files/@package@/@tail_libdir@ && for i in * ; do if [ -f $$i ] ; then (echo "-- $$i" ; set -x ; ls -l $$i ; otool -L $$i ) ; fi ; done

tidy:; rm -rf files
clean:: tidy; rm -f "../../$(PKG_DMG)"
distclean: clean; rm -f Makefile
Makefile: Makefile.in; cd ../..; ./config.status distributions/dmg/Makefile
# Local Variables:
# compile-command: "make -C $M2BUILDDIR/distributions/dmg -o tidy "
# End:
.NOTPARALLEL:
