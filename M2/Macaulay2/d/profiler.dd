-- Copyright 2024 by Mahrud Sayrafi

use binding;  -- for symbols
use evaluate; -- for eval

header "
#include <thread>
#include <vector>
#include <iostream>

// defined in main.cpp, uses Boost::stacktrace
void profiler_stacktrace(std::ostream &, int);

// the top-level runtime stack
thread_local std::vector<stdiop0_Position> M2_stack;";

stackpush(p:Position):void := Ccode(void, "M2_stack.emplace_back(", p, ")" );
stackpop(e:Expr):Expr    := ( Ccode(void, "M2_stack.pop_back()"); e );

export stacktrace(n:int):void := Ccode(void, "
    for (stdiop0_Position frameptr : M2_stack)
      std::cout << stdiop_tostring(frameptr) << std::endl;");
stacktrace(e:Expr):Expr := (
    when e is n:ZZcell do if !isInt(n) then WrongArgSmallInteger(1)
    else ( if toInt(n) != 0 then stacktrace(toInt(n))
	else Ccode(void, "profiler_stacktrace(std::cout, 0)"); nullE )
    else WrongArgSmallInteger(1));
setupfun("stacktrace", stacktrace);

export evalprof(c:Code):Expr := (
    stdIO << tostring(codePosition(c)) << " " << tostring(c) << endl;
    stackpush(codePosition(c)) ;
    stackpop(evalraw(c)));
evalprofpointer = evalprof;

profile(c:Code):Expr := (
    stdError << " -- profile called" << endl;
    profiling = true;
    ret := eval(c);
    profiling = false;
    ret);
setupop(profileS, profile);
