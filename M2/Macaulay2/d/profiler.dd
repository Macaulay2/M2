-- Copyright 2024 by Mahrud Sayrafi

use binding;  -- for symbols
use evaluate; -- for eval
use chrono;   -- for wallTimer
use sets;     -- for Tally

header "
#include <thread>
#include <vector>
#include <iostream>

// defined in main.cpp, uses Boost::stacktrace
void profiler_stacktrace(std::ostream &, int);

// the top-level runtime stack
thread_local std::vector<stdiop0_Position> M2_stack;";

-- TODO: implement better std::vector utilities
-- push and pop the given positions in the top-level call stack log
stackpush(p:Position):Expr := ( Ccode(void, "M2_stack.emplace_back(", p, ")"); locate(p) );
stackpop(e:Expr):Expr      := ( Ccode(void, "M2_stack.pop_back()"); e );

-- if traceDepth = 0, _prints_ the engine stacktrace using Boost::stacktrace
-- if traceDepth > 0, returns a sequence of positions from the parsing tree
-- TODO: limit this to Code, packages, stc for traceDepth = 1, 2, 3, etc.
export stacktrace(traceDepth:int):Expr := (
    if traceDepth == 0
    then ( Ccode(void, "profiler_stacktrace(std::cout, 0)"); nullE )
    else Expr(new Sequence len Ccode(int, "M2_stack.size()") at i do
	provide locate(Ccode(Position, "M2_stack[", i, "]"))));
stacktrace(e:Expr):Expr := (
    when e is n:ZZcell do if !isInt(n) then WrongArgSmallInteger(1)
    else stacktrace(toInt(n))
    else WrongArgSmallInteger(1));
setupfun("stacktrace", stacktrace);

-- this hash table will contain the accumulation of
-- profiling data (ticks and times) in each session
-- TODO: this should be thread local as well
ProfileTable := newHashTable(Tally, nothingClass);
ProfileTable.beingInitialized = false; -- mutex locks will occur
setupconst("ProfileTable", Expr(ProfileTable));

-- increments the entry corresponding to key in ProfileTable.
increment(key:Expr, data:Sequence):Expr := (
    seconds := data.0;
    outcome := data.1;
    -- TODO: optimize the bucket search
    current := lookup(ProfileTable, key);
    storeInHashTable(ProfileTable, key,
	Expr(when current is s:Sequence
	    do   Sequence(seconds + s.0, oneE + s.1)
	    else Sequence(seconds,       oneE)));
    outcome);

-- pushes the code position into the stack, times the evaluation,
-- increments the stopwatch, pops the stack, and returns the value!
-- Note: wallTimer calls evalraw, not eval
measure(c:Code):Expr := stackpop(increment(stackpush(codePosition(c)), wallTimer(c)));

-- when profiling = true is set, eval is substituted with evalprof,
-- so that everytime evalraw recursively calls eval, this one runs.
export evalprof(c:Code):Expr := (
    -- stdIO << tostring(codePosition(c)) << " " << tostring(c) << endl;
    when c
    is c:ifCode do (
	p := measure(c.predicate);
	when p is Error do p
	else if p == True  then measure(c.thenClause)
	else if p == False then measure(c.elseClause)
	else printErrorMessageE(c.predicate, "expected true or false"))
    is v:semiCode do (
	i := 0;
	w := v.w;
	r := nullE;
	n := length(w);
	while i < n do (
	    r = measure(w.i);
	    i = when r is Error do n else i+1);
	r)
    else evalraw(c));
evalprofpointer = evalprof;

-- briefly enables the profiler and evaluates the code that follows,
-- updating the resulting statistics in the global ProfileTable.
profile(c:Code):Expr := (
    if debugLevel == -2 then printMessage(codePosition(c), "entering profiler");
    profiling = true;
    data := cpuTimer(c); -- calls eval, not evalraw
    profiling = false;
    if debugLevel == -2 then printMessage(codePosition(c), "leaving profiler");
    -- increment the total time in profiler and return the result
    increment(toExpr("total"), data));
setupop(profileS, profile);
