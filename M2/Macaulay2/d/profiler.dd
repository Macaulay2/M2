-- Copyright 2024 by Mahrud Sayrafi

use binding;  -- for symbols
use evaluate; -- for eval

header "
#include <thread>
#include <vector>
#include <iostream>

// defined in main.cpp, uses Boost::stacktrace
void profiler_stacktrace(std::ostream &, int);

// the top-level runtime stack
thread_local std::vector<stdiop0_Position> M2_stack;";

-- TODO: implement better std::vector utilities
-- push and pop the given positions in the top-level call stack log
stackpush(p:Position):void := Ccode(void, "M2_stack.emplace_back(", p, ")" );
stackpop(e:Expr):Expr    := ( Ccode(void, "M2_stack.pop_back()"); e );

-- if traceDepth = 0, _prints_ the engine stacktrace using Boost::stacktrace
-- if traceDepth > 0, returns a sequence of positions from the parsing tree
-- TODO: limit this to Code, packages, stc for traceDepth = 1, 2, 3, etc.
export stacktrace(traceDepth:int):Expr := (
    if traceDepth == 0
    then ( Ccode(void, "profiler_stacktrace(std::cout, 0)"); nullE )
    else Expr(new Sequence len Ccode(int, "M2_stack.size()") at i do
	provide locate(Ccode(Position, "M2_stack[", i, "]"))));
stacktrace(e:Expr):Expr := (
    when e is n:ZZcell do if !isInt(n) then WrongArgSmallInteger(1)
    else stacktrace(toInt(n))
    else WrongArgSmallInteger(1));
setupfun("stacktrace", stacktrace);

-- when profiling = true is set, eval is substituted with evalprof,
-- so that everytime evalraw recursively calls eval, this one runs.
export evalprof(c:Code):Expr := (
    stdIO << tostring(codePosition(c)) << " " << tostring(c) << endl;
    stackpush(codePosition(c));
    stackpop(evalraw(c)));
evalprofpointer = evalprof;

-- briefly enables the profiler and evaluates the code that follows
profile(c:Code):Expr := (
    stdError << " -- starting profiler" << endl;
    profiling = true;
    ret := evalprof(c);
    profiling = false;
    stdError << " -- stopping profiler" << endl;
    ret);
setupop(profileS, profile);
