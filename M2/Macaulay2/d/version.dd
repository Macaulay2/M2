--		Copyright 2010 by Daniel R. Grayson 

use M2;
use hashtables;

declarations "
   #ifdef HAVE_WINSOCK2_H
    #include <winsock2.h>
      /* under mingw64 winsock2.h should be included before including windows.h
	  pthread.h includes windows.h
	   therefore winsock2.h should be included before pthread */
    #undef ERROR
   #endif
   #if USE_MYSQL
     #include <mysql/mysql.h>
   #endif
   #ifdef HAVE_PYTHON
     #include <python2.5/Python.h>
   #else
     #define PyObject_Str(o) 0
     #define PyString_AS_STRING(o) 0
     #define Py_DECREF(o) 0
   #endif
   ";

header "
   #include <atomic_ops.h>
   #include <mpfr.h>
   #include <memtailor.h>
   #include <mathic.h>
   #include <mathicgb.h>
   #define stringize0(a) #a
   #define stringize(a) stringize0(a)
   #define Matrix FactoryMatrix
   #include <factory/factory.h>
   #include \"git-description.c\"
   #undef Matrix
   extern char timestamp[];
   #undef ASSERT
   #ifdef HAVE_FROBBY
     #include <stdinc.h>		// to get version number of frobby
     #define FROBBY_VERSION constants::version
   #else
     #define FROBBY_VERSION \"not present\"
   #endif
   #include <pari-c.h>
   #ifdef HAVE_SCSCP
     #include <scscp.h>
     void scscp_dummy() { SCSCP_sc_init(NULL,NULL); /* just to force linking with the library */ }
   #endif
   #include <stdio.h>
   extern unsigned int GC_version; /* in libgc.a */
   #include <gmp.h>
   #include <NTL/version.h>
   #include <factory/factoryconf.h>
   #undef ASSERT
   static int32_t endianness_string[2] = {0x61626364,0};
   #include <readline/readline.h>
   #ifdef HAVE_GIVARO
       #include <givaro/givconfig.h>
   #endif
   #ifdef HAVE_LINBOX
       #include <linbox/linbox-config.h>
   #endif
   #ifdef HAVE_FLINT
       #include <M2/gc-include.h>
       #include <flint/flint.h>
   #endif
   ";
gcversion():constcharstar := Ccode(returns,"
     static char buf[40];
     unsigned x = GC_get_version();
     unsigned major = x >> 16;
     unsigned minor = (x >> 8) & 0xff;
     unsigned micro = x & 0xff;
     if (micro == 0xff) sprintf(buf,\"%d.%d\", major, minor);
     else sprintf(buf,\"%d.%d.%d\", major, minor, micro);
     return buf;
     ");

atomicopsversion():constcharstar := Ccode(returns,"
#ifdef AO_VERSION_MICRO
     static char buf[40];
     sprintf(buf,\"%d.%d.%d\",AO_VERSION_MAJOR, AO_VERSION_MINOR, AO_VERSION_MICRO);
     return buf;
#else
     return \"version number not available\"
#endif
     ");

givaroVersion():constcharstar := Ccode(returns,"
     #ifdef HAVE_GIVARO
	  static char buf[40];
	  sprintf(buf,\"%d.%d.%d\", GIVARO_MAJOR_VERSION, GIVARO_MINOR_VERSION, GIVARO_REVISION_VERSION);
	  return buf;
     #else
	  return \"not present\";
     #endif
     ");
factoryversion():constcharstar := Ccode(returns,"
     extern const char factoryVersion[]; /* extracted from factory's factory.h */
     char const * p = strrchr(factoryVersion,' ');
     return p ? p+1 : factoryVersion;
     ");
readlineversion():constcharstar := Ccode(returns,"
     static char buf[8];
     sprintf(buf, \"%d.%d\", (rl_readline_version>>8)&0xff, rl_readline_version&0xff );
     return buf;
     ");

ic := Ccode(int, "
     #if defined(__INTEL_COMPILER)
     	  __INTEL_COMPILER
     #else
     	  0
     #endif
     ");
compiler := (
     if ic != 0
     then "icc " + (
	  if ic % 10 == 0
	  then tostring(ic/100) + "." + tostring((ic/10)%10)
	  else tostring(ic/100) + "." + tostring(ic%100)
	  )
     else tostring(Ccode(constcharstar,"
	    #if defined(__GNUC__)
	    #ifdef __GNUC_PATCHLEVEL__
		 \"gcc \" stringize(__GNUC__) \".\" stringize(__GNUC_MINOR__) \".\" stringize(__GNUC_PATCHLEVEL__)
	    #else
		 \"gcc \" stringize(__GNUC__) \".\" stringize(__GNUC_MINOR__)
	    #endif
	    #else
	    \"unknown\"
	    #endif
	    ")));

setupconst("version", Expr(toHashTable(Sequence(
   "VERSION" => Ccode(constcharstar,"PACKAGE_VERSION"),
   "architecture" => Ccode(constcharstar,"ARCH"),
   "issue" => Ccode(constcharstar,"ISSUE"),
   "machine" => Ccode(constcharstar,"MACHINE"),
   "operating system" => Ccode(constcharstar,"OS"),
   "operating system release" => Ccode(constcharstar,"REL"),
   "compiler" => compiler,
   "configure arguments" => Ccode(constcharstar,"CONFIG_ARGS"),
   "compile time" => Ccode(constcharstar,"timestamp"),
   "compile node name" => Ccode(constcharstar,"NODENAME"),
   "dumpdata" => Ccode(bool,"
	  #if DUMPDATA
	       haveDumpdata()
	  #else
	       0
	  #endif
	  "),
   "atomic_ops version" => atomicopsversion(),
   "gc version" => gcversion(),
   "mysql version" => Ccode(constcharstar,"
	  #if USE_MYSQL
		   mysql_get_client_info()
	  #else
		   \"not present\"
	  #endif
	  "),
   "givaro version" => givaroVersion(),
   "linbox version" => Ccode(constcharstar,"
	  #ifdef HAVE_LINBOX
	       __LINBOX_VERSION
	  #else
	       \"not present\"
	  #endif
	  "),
   "python version" => Ccode(constcharstar,"
	#ifdef HAVE_PYTHON
		 PY_VERSION				      
	#else
		 \"not present\"
	#endif
	"),
   "gmp version" => Ccode(constcharstar,"
	  #ifdef __MPIR_VERSION
	       \"not present\"
	  #else
	       __gmp_version
	  #endif
	  "),
   "mpir version" => Ccode(constcharstar,"
	#ifdef __MPIR_VERSION
	     __mpir_version
	#else
	     \"not present\"
	#endif
	"),
   "ntl version" => Ccode(constcharstar,"NTL_VERSION"),
   "frobby version" => Ccode(constcharstar,"FROBBY_VERSION"),
   "pari version" => Ccode(constcharstar,"
	 #ifdef HAVE_PARI
	   get_pari_version()
	 #else
	   \"not present\"
	 #endif
	 "),
   "flint version" => Ccode(constcharstar,"
	 #if HAVE_FLINT
	   FLINT_VERSION
	 #else
	   \"not present\"
	 #endif
	 "),
   "scscp version" => Ccode(constcharstar,"
	 #ifdef HAVE_SCSCP
	   stringize(SCSCP_VERSION_MAJOR) \".\" stringize(SCSCP_VERSION_MINOR) \".\" stringize(SCSCP_VERSION_PATCH)
	 #else
	   \"not present\"
	 #endif
	 "),
   "memtailor version" => Ccode(constcharstar,"MEMTAILOR_VERSION_STRING"),
   "mathic version" => Ccode(constcharstar,"MATHIC_VERSION_STRING"),
   "mathicgb version" => Ccode(constcharstar,"MATHICGB_VERSION_STRING"),
   "factory version" => factoryversion(),
   "readline version" => readlineversion(),
   "mpfr version" => Ccode(constcharstar,"mpfr_version"),
   "M2 suffix" => Ccode(constcharstar,"M2SUFFIX"),
   "executable extension" => Ccode(constcharstar,"EXEEXT"),
   "M2 name" => Ccode(constcharstar," \"M2\" M2SUFFIX EXEEXT "),
   "endianness" => Ccode(constcharstar,"(char *)endianness_string"),
   "pointer size" => Ccode(int,"sizeof(void *)"),
   "packages" => Ccode(constcharstar,"PACKAGES"),
   "build" => Ccode(constcharstar,"buildsystemtype"),
   "host" => Ccode(constcharstar,"hostsystemtype"),
   "threads" => USE_THREADS,
   "git description" => Ccode(constcharstar,"gitDescription")
   ))));

-- Local Variables:
-- compile-command: "echo \"make: Entering directory \\`$M2BUILDDIR/Macaulay2/d'\" && echo \"make: Entering directory \\`$M2BUILDDIR/Macaulay2/d'\" && make -C $M2BUILDDIR/Macaulay2/d version.o "
-- End:
