# @configure_input@
include ../../include/config.Makefile
VPATH = @srcdir@
SRCDIR = @srcdir@
DEPENDS = yes

PRE.cc   = $(COMPILE.cc) -E 

include @srcdir@/Makefile.files
include Makefile.common
CPPFLAGS := -I. -I@srcdir@ -I../e-includes $(CPPFLAGS) -I../d -I@srcdir@/../c -Wno-fatal-errors
CXXFLAGS += -std=c++0x -Wno-sign-conversion #-Wno-unused-local-typedefs

# to exclude files in documentation itself from processing it is neccesary to divide the path into 2 parts.
# M2_E_DOXYGEN_OUTPUT_DIR_POSTFIX should be unique in the sense that the pattern *$(M2_E_DOXYGEN_OUTPUT_DIR_POSTFIX)* does not match for any of the source file directories.
M2_E_DOXYGEN_OUTPUT_DIR_PREFIX := .
M2_E_DOXYGEN_OUTPUT_DIR_POSTFIX :=/srcdoc/
M2_E_DOXYGEN_OUTPUT_BASEDIR :=$(M2_E_DOXYGEN_OUTPUT_DIR_PREFIX)/$(M2_E_DOXYGEN_OUTPUT_DIR_POSTFIX)

DOXYGEN_CONF_DIR :=$(SRCDIR)/doxygen-settings

.PHONY : tags fixspace

###################################################################
## Targets ##
#############

ifneq (@ETAGS@,false)
all: tags
endif
tags:: @srcdir@/TAGS
@srcdir@/TAGS: Makefile.in @srcdir@/*.hpp @srcdir@/*.h @srcdir@/*.cpp @srcdir@/*.c \
		 @srcdir@/f4/*.hpp @srcdir@/f4/*.cpp \
		 @srcdir@/unit-tests/*.cpp \
		 @srcdir@/../e-includes/statuscodes
	@ echo " ** making etags file"
	@ cd @srcdir@ && @ETAGS@ -o TAGS $(patsubst @srcdir@/%, %, $^)

# overflows
LDLIBS = @GC_LIBS@

all: run-overflow-test
run-overflow-test : overflow-test
	./$^ sub 2>/dev/null || echo test succeeded
	./$^ minus 2>/dev/null || echo test succeeded
	./$^ mult 2>/dev/null || echo test succeeded
	./$^ div 2>/dev/null || echo test succeeded
	./$^ add 2>/dev/null || echo test succeeded
	touch $@
clean :: ; rm -f run-overflow-test
pi overflow-test : overflow.o ../d/debug.o
clean :: ; rm -f overflow-test
pi : pi.h

all:; $(MAKE) -C f4

ifeq "$(SHARED)" "yes"
all: @pre_librariesdir@/libengine.so
else
all: $(ENGINE_OFILES)
endif

%.ii: %.cpp; $(PRE.cc)        $< $(OUTPUT_OPTION)
%.s : %.cpp; $(COMPILE.cc) -S $< $(OUTPUT_OPTION)
%.ii: %.cc; $(PRE.cc)        $< $(OUTPUT_OPTION)
%.s : %.cc; $(COMPILE.cc) -S $< $(OUTPUT_OPTION)
%.ss : %.s ; demangle <$< >$@

%.lo : %.c  ; $(COMPILE.c)  -fPIC $< $(OUTPUT_OPTION)
%.lo : %.cc ; $(COMPILE.cc) -fPIC $< $(OUTPUT_OPTION)
%.lo : %.cpp; $(COMPILE.cc) -fPIC $< $(OUTPUT_OPTION)
@pre_librariesdir@/libengine.so : $(LOFILES); @CC@ -shared $^ $(OUTPUT_OPTION)

MORE_OPTIONS = -Wno-cast-qual
COMPILE.c += $(MORE_OPTIONS)
COMPILE.cc += $(MORE_OPTIONS)

clean::
	rm -f *.lo *.o *.rpo LOGFILE
	$(MAKE) -C f4 $@
Makefile : Makefile.in; cd ../..; ./config.status Macaulay2/e/Makefile
all: Makefile.common
Makefile.common : Makefile.common.in; cd ../..; ./config.status Macaulay2/e/Makefile.common
Makefile.include : Makefile.include.in; cd ../..; ./config.status Macaulay2/e/Makefile.include
clean::; rm -f *.dep dep-*.tmp typecode.db TAGS
ifeq "$(DEPENDS)" "yes"
include $(ENGINE_CFILES:.c=.dep) $(ENGINE_CCFILES:.cpp=.dep)
endif

clean check::
	$(MAKE) -C unit-tests $@

# this requires gnu sort and gnu uniq commands
NMFLAGS = -o
ifeq (@NM_DEMANGLES@,yes)
NMFLAGS += --demangle
endif
dups-tmp: $(ENGINE_OBJFILES)
	nm $(NMFLAGS) $(ENGINE_OBJFILES) |grep ' T ' |sort -k 2 |uniq -2 -d |tee dups-tmp
dups-okay: dups-tmp
	@if [ -s $< ]; then echo "Multiple definitions found:"; cat $<; exit 1; \
	 else touch $@; fi
doxygen : ; cd @srcdir@ && doxygen
distclean: clean; rm -f Makefile @srcdir@/TAGS

pi-demangled.s pi-test.s pi-test.o pi.s pi.E pi.o : pi.h pi-masks.h
pi-test : exceptions.o overflow.o
# check :: pi-test-run
pi-test-run : pi-test ; ./pi-test
pi-masks.h : pi-genmask
	./$^ >$@

pm-test.o : pm.hpp

SCCFLAGS += -I../d

# a stand-alone program made from test.dd
# test : ../c/scc-core.o
test : complex.o
test : LDFLAGS += -L../d -lmpfr -lmpir -lfac -lcf -lcfmem
test : LDLIBS += -ld

test.o : CXXFLAGS += -Wno-unused -Wno-uninitialized -Wno-cast-qual

clean :: ; rm -f pi-demangled.s pi-test.s pi-test.o pi.s pi.E pi.o pi-test pi-test-run pi-masks.h
clean :: ; rm -rf *.dSYM


extended_doxygen:
	export DOXYGEN_INPUT_DIR=$(SRCDIR); \
	export DOXYGEN_OUTPUT_DIR=$(DOXYGEN_OUTPUT_DIR); \
	export DOXYGEN_OUTPUT_BASEDIR=$(DOXYGEN_OUTPUT_BASEDIR); \
	export DOXYGEN_EXCLUDE_PATTERN=$(DOXYGEN_EXCLUDE_PATTERN); \
	export HAVE_DOT_SETTING=$(HAVE_DOT_SETTING) ; \
	export INHERITMEMBERS=$(INHERITMEMBERS); \
	export CALL_GRAPH_SETTING=$(CALL_GRAPH_SETTING) ; \
	mkdir -p $(DOXYGEN_OUTPUT_DIR) ; \
	cp $(DOXYGEN_CONF_DIR)/Doxyconf ./Doxyconf ; \
	doxygen  -u ./Doxyconf ;  \
	doxygen ./Doxyconf ; \
	cp $(DOXYGEN_CONF_DIR)/styleSheetFile.css $(DOXYGEN_OUTPUT_DIR)  ; \
	cp $(DOXYGEN_CONF_DIR)/tabs.css $(DOXYGEN_OUTPUT_DIR)  ; \
	cp $(DOXYGEN_CONF_DIR)/navtree.css $(DOXYGEN_OUTPUT_DIR)  ; \
	echo "documentation was written to "$(DOXYGEN_OUTPUT_DIR) ;
#doxygen -s  -u ./Doxyconf_copy ; # updates a config file and drops parameter documentation.

# -exporting DOXYGEN_EXCLUDE_PATTERN is required to exclude the documentation folder from parsing if documentation is a subfolder in the source file tree.
# -it is possible to customize the output folder directory by calling 'make tinydocs M2_E_DOXYGEN_OUTPUT_BASEDIR=$custom_output_directory'



ifeq ($(INHERITMEMBERS),YES) 
INHERITED_POSTFIX="_show_inherited" 
else
INHERITMEMBERS=NO
endif



ifeq ($(DOCSIZE),small) 
DOCTARGET=smalldoc
else
ifeq ($(DOCSIZE),tiny) 
DOCTARGET=tinydoc
else
ifeq ($(DOCSIZE),full) 
DOCTARGET=fulldoc
else
DOCTARGET=smalldoc
endif
endif
endif

tinydoc:
	$(MAKE) extended_doxygen \
	DOXYGEN_OUTPUT_BASEDIR=$(M2_E_DOXYGEN_OUTPUT_BASEDIR) \
	DOXYGEN_OUTPUT_DIR=$(M2_E_DOXYGEN_OUTPUT_BASEDIR)/tiny$(INHERITED_POSTFIX) \
	DOXYGEN_EXCLUDE_PATTERN=*$(M2_E_DOXYGEN_OUTPUT_DIR_POSTFIX)* \
	HAVE_DOT_SETTING=NO \
	CALL_GRAPH_SETTING=NO \
	INHERITMEMBERS=$(INHERITMEMBERS) \

smalldoc:
	$(MAKE) extended_doxygen \
	DOXYGEN_OUTPUT_BASEDIR=$(M2_E_DOXYGEN_OUTPUT_BASEDIR) \
	DOXYGEN_OUTPUT_DIR=$(M2_E_DOXYGEN_OUTPUT_BASEDIR)/small$(INHERITED_POSTFIX) \
	DOXYGEN_EXCLUDE_PATTERN=*$(M2_E_DOXYGEN_OUTPUT_DIR_POSTFIX)* \
	HAVE_DOT_SETTING=YES \
	CALL_GRAPH_SETTING=NO \
	INHERITMEMBERS=$(INHERITMEMBERS) \
	ln -s $(M2_E_DOXYGEN_OUTPUT_BASEDIR)/small$(INHERITED_POSTFIX) default

fulldoc:
	$(MAKE) extended_doxygen \
	DOXYGEN_OUTPUT_BASEDIR=$(M2_E_DOXYGEN_OUTPUT_BASEDIR) \
	DOXYGEN_OUTPUT_DIR=$(M2_E_DOXYGEN_OUTPUT_BASEDIR)/full$(INHERITED_POSTFIX) \
	DOXYGEN_EXCLUDE_PATTERN=*$(M2_E_DOXYGEN_OUTPUT_DIR_POSTFIX)* \
	HAVE_DOT_SETTING=YES \
	CALL_GRAPH_SETTING=YES \
	INHERITMEMBERS=$(INHERITMEMBERS)

doc: 
	$(MAKE) $(DOCTARGET) INHERITMEMBERS=$(INHERITMEMBERS)

# fixing spaces.  Thanks to Bjarke Roune for the 'fixspace' shell script
# BUT: this cannot be run on Makefile's (that is why we just grab c and c++ source files)
fixspace:
	find @srcdir@ . -name "*.hpp" -or -name "*.cpp" -or -name "*.h" -or -name "*.c" |xargs @srcdir@/fixspace;


cleandoc: 
	rm -rf $(M2_E_DOXYGEN_OUTPUT_BASEDIR);

help:
	@ echo "Macaulay2 version @PACKAGE_VERSION@"
	@ echo ""
	@ echo "make files configured with:"
	@ echo "    OS=@OS@ REL=@REL@ ISSUE=@ISSUE@ ARCH=@ARCH@ STATIC=@STATIC@"
	@ echo "    DEBUG=@DEBUG@ OPTIMIZE=@OPTIMIZE@ ENCAP=@ENCAP@"
	@ echo ""
	@ echo "Macaulay2 executable location:"
	@ echo "   @pre_bindir@/M2@EXE@"
	@ echo ""
	@ echo "Make for Macaulay2/e- directory"
	@ echo "usage: make ..."
	@ echo ""
	@ echo "targets:"
	@ echo "  all               build/compile all files in Macaulay2/e [the default target]"
	@ echo "  clean             remove all generated files in Macaulay2/e except configured files"
	@ echo "  doc 	            create documentation for Macaulay2/e source files    "
	@ echo "  cleandoc          clean documentation "
	@ echo "  help              show this help"
	@ echo " "
	@ echo "make doc options:"
	@ echo "  DOCSIZE=tiny/small/full "
	@ echo "          tiny:  no diagrams, 						same effect with 'make tinydoc'"
	@ echo "          small:  with diagrams but without function call diagrams ; 	same effect with 'make smalldoc'"
	@ echo "          full:   with almost all diagrams;				same effect with 'make fulldoc'"
	@ echo "  INHERITEDMEMBERS=YES/NO : inline inherited members [default=NO] "
	@ echo "  M2_E_DOXYGEN_OUTPUT_BASEDIR :  set custom documentation output directory "

# Local Variables:
# compile-command: "make -C $M2BUILDDIR/Macaulay2/e DEPENDS=no initialize && make -C $M2BUILDDIR/Macaulay2/e "
# End:

.NOTPARALLEL:
