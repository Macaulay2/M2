TEST ///
-- Test make_totally_dual_integral/3.poly
-- Checking latticePoints
verticesP0 = matrix {{-1/2,1/2,1/2,1/2,3/2,1/2,1/2,1/2},{1/2,-1/2,1/2,1/2,1/2,3/2,1/2,1/2},{1/2,1/2,1/2,-1/2,1/2,1/2,3/2,1/2},{1/2,1/2,-1/2,1/2,1/2,1/2,1/2,3/2}};
desiredLP0 = matrix {{}};
desiredLP0 = sort desiredLP0;
P0 = convexHull(verticesP0)
computedLP0 = sort matrix {latticePoints P0};
assert(desiredLP0 == computedLP0);

-- Test fractional_matching_polytope/1.poly
-- Checking latticePoints
verticesP1 = matrix {{0,0,1/2,0,1,1/2,0,0,0,0,0,1,0,0},{0,1,1/2,0,0,0,1/2,0,0,0,0,0,1,0},{1,0,1/2,0,0,0,0,1/2,0,0,0,0,0,1},{0,0,0,0,0,1/2,1/2,0,0,1,0,0,0,1},{0,0,0,0,0,1/2,0,1/2,1,0,0,0,1,0},{0,0,0,0,0,0,1/2,1/2,0,0,1,1,0,0}};
desiredLP1 = matrix {{0,0,0,0,0,0,0,0,1,1},{0,0,0,0,0,0,1,1,0,0},{0,0,0,0,1,1,0,0,0,0},{0,0,0,1,0,1,0,0,0,0},{0,0,1,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,0,1}};
desiredLP1 = sort desiredLP1;
P1 = convexHull(verticesP1)
computedLP1 = sort matrix {latticePoints P1};
assert(desiredLP1 == computedLP1);

-- Test wreath/1.poly
-- Checking latticePoints
verticesP2 = matrix {{-1,0,1,0,0,0,0,0,0,0,0,0},{-1,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,-1,0,1,0,0,0,0,0,0},{0,0,0,-1,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,-1,0,1,0,0,0},{0,0,0,0,0,0,-1,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,-1,0,1},{0,0,0,0,0,0,0,0,0,-1,1,0},{-1,-1,-1,-1,-1,-1,1,1,1,1,1,1},{-1,-1,-1,1,1,1,1,1,1,-1,-1,-1}};
desiredLP2 = matrix {{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,-1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,-1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{-1,-1,1,1,-1,-1,-1,0,0,0,1,1,1,1,1,1,1,-1,-1,-1,-1},{-1,1,1,-1,-1,0,1,-1,0,1,-1,0,1,-1,-1,1,1,1,1,-1,-1}};
desiredLP2 = sort desiredLP2;
P2 = convexHull(verticesP2)
computedLP2 = sort matrix {latticePoints P2};
assert(desiredLP2 == computedLP2);

-- Test face_lattice/2.poly
-- Checking latticePoints
verticesP3 = matrix {{-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1},{-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1},{-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,1,1,1,1},{-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1}};
desiredLP3 = matrix {{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1},{-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1},{-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1}};
desiredLP3 = sort desiredLP3;
P3 = convexHull(verticesP3)
computedLP3 = sort matrix {latticePoints P3};
assert(desiredLP3 == computedLP3);

-- Test CD_INDEX_COEFFICIENTS/1.poly
-- Checking latticePoints
verticesP4 = matrix {{-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1},{-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1},{-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,1,1,1,1},{-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1},{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
desiredLP4 = matrix {{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1},{-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1,-1,-1,-1,0,0,0,1,1,1},{-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1}};
desiredLP4 = sort desiredLP4;
P4 = convexHull(verticesP4)
computedLP4 = sort matrix {latticePoints P4};
assert(desiredLP4 == computedLP4);

-- Test permutahedron/3.poly
-- Checking latticePoints
verticesP5 = matrix {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},{2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,1,1,1,1,1,1,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,1,1,1,1,1,1,2,2,2,2,2,2,4,4,4,4,4,4,5,5,5,5,5,5,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,5,5,5,5,5,5,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4},{3,3,4,4,5,5,2,2,4,4,5,5,2,2,3,3,5,5,2,2,3,3,4,4,3,3,4,4,5,5,1,1,4,4,5,5,1,1,3,3,5,5,1,1,3,3,4,4,2,2,4,4,5,5,1,1,4,4,5,5,1,1,2,2,5,5,1,1,2,2,4,4,2,2,3,3,5,5,1,1,3,3,5,5,1,1,2,2,5,5,1,1,2,2,3,3,2,2,3,3,4,4,1,1,3,3,4,4,1,1,2,2,4,4,1,1,2,2,3,3},{4,5,3,5,3,4,4,5,2,5,2,4,3,5,2,5,2,3,3,4,2,4,2,3,4,5,3,5,3,4,4,5,1,5,1,4,3,5,1,5,1,3,3,4,1,4,1,3,4,5,2,5,2,4,4,5,1,5,1,4,2,5,1,5,1,2,2,4,1,4,1,2,3,5,2,5,2,3,3,5,1,5,1,3,2,5,1,5,1,2,2,3,1,3,1,2,3,4,2,4,2,3,3,4,1,4,1,3,2,4,1,4,1,2,2,3,1,3,1,2},{5,4,5,3,4,3,5,4,5,2,4,2,5,3,5,2,3,2,4,3,4,2,3,2,5,4,5,3,4,3,5,4,5,1,4,1,5,3,5,1,3,1,4,3,4,1,3,1,5,4,5,2,4,2,5,4,5,1,4,1,5,2,5,1,2,1,4,2,4,1,2,1,5,3,5,2,3,2,5,3,5,1,3,1,5,2,5,1,2,1,3,2,3,1,2,1,4,3,4,2,3,2,4,3,4,1,3,1,4,2,4,1,2,1,3,2,3,1,2,1}};
desiredLP5 = matrix {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},{2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4},{3,3,4,4,4,5,5,2,2,3,3,3,4,4,4,4,5,5,5,2,2,2,3,3,3,3,4,4,4,5,5,2,2,3,3,3,4,4,3,3,4,4,4,5,5,2,2,3,3,3,4,4,4,4,5,5,5,1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,5,5,5,1,1,2,2,2,3,3,3,3,4,4,4,2,2,3,3,3,4,4,4,4,5,5,5,1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,5,5,5,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,5,5,1,1,1,2,2,2,2,3,3,3,4,4,2,2,2,3,3,3,3,4,4,4,5,5,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,5,5,5,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,5,5,1,1,1,2,2,2,2,3,3,3,4,4,1,1,2,2,2,3,3,2,2,3,3,3,4,4,1,1,2,2,2,3,3,3,3,4,4,4,1,1,1,2,2,2,2,3,3,3,4,4,1,1,2,2,2,3,3},{4,5,3,4,5,3,4,4,5,3,4,5,2,3,4,5,2,3,4,3,4,5,2,3,4,5,2,3,4,2,3,3,4,2,3,4,2,3,4,5,3,4,5,3,4,4,5,3,4,5,2,3,4,5,2,3,4,4,5,3,4,5,2,3,4,5,1,2,3,4,5,1,2,3,4,3,4,5,2,3,4,5,1,2,3,4,5,1,2,3,4,1,2,3,3,4,2,3,4,1,2,3,4,1,2,3,4,5,3,4,5,2,3,4,5,2,3,4,4,5,3,4,5,2,3,4,5,1,2,3,4,5,1,2,3,4,3,4,5,2,3,4,5,1,2,3,4,5,1,2,3,4,1,2,3,2,3,4,5,1,2,3,4,5,1,2,3,4,1,2,3,1,2,2,3,4,1,2,3,4,1,2,3,1,2,3,4,5,2,3,4,5,2,3,4,2,3,3,4,5,2,3,4,5,1,2,3,4,5,1,2,3,4,1,2,3,2,3,4,5,1,2,3,4,5,1,2,3,4,1,2,3,1,2,2,3,4,1,2,3,4,1,2,3,1,2,2,3,1,2,3,1,2,3,4,2,3,4,2,3,3,4,2,3,4,1,2,3,4,1,2,3,2,3,4,1,2,3,4,1,2,3,1,2,2,3,1,2,3,1,2},{5,4,5,4,3,4,3,5,4,5,4,3,5,4,3,2,4,3,2,5,4,3,5,4,3,2,4,3,2,3,2,4,3,4,3,2,3,2,5,4,5,4,3,4,3,5,4,5,4,3,5,4,3,2,4,3,2,5,4,5,4,3,5,4,3,2,5,4,3,2,1,4,3,2,1,5,4,3,5,4,3,2,5,4,3,2,1,4,3,2,1,3,2,1,4,3,4,3,2,4,3,2,1,3,2,1,5,4,5,4,3,5,4,3,2,4,3,2,5,4,5,4,3,5,4,3,2,5,4,3,2,1,4,3,2,1,5,4,3,5,4,3,2,5,4,3,2,1,4,3,2,1,3,2,1,5,4,3,2,5,4,3,2,1,4,3,2,1,3,2,1,2,1,4,3,2,4,3,2,1,3,2,1,2,1,5,4,3,5,4,3,2,4,3,2,3,2,5,4,3,5,4,3,2,5,4,3,2,1,4,3,2,1,3,2,1,5,4,3,2,5,4,3,2,1,4,3,2,1,3,2,1,2,1,4,3,2,4,3,2,1,3,2,1,2,1,3,2,3,2,1,2,1,4,3,4,3,2,3,2,4,3,4,3,2,4,3,2,1,3,2,1,4,3,2,4,3,2,1,3,2,1,2,1,3,2,3,2,1,2,1}};
desiredLP5 = sort desiredLP5;
P5 = convexHull(verticesP5)
computedLP5 = sort matrix {latticePoints P5};
assert(desiredLP5 == computedLP5);

///
