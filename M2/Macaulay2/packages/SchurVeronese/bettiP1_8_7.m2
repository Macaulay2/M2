--This file computes Betti tables for P^1 for d = 8 and b = 7
A := degreesRing 2
new HashTable from {
--tb stands for Total Betti numbers
"tb"=>new HashTable from {(7,0) => 8, (6,1) => 0, (7,1) => 0, (0,0) => 8, (1,0) => 56, (0,1) => 0, (2,0) => 168, (1,1) => 0, (2,1) => 0, (3,0) => 280, (3,1) => 0, (4,0) => 280, (5,0) => 168, (4,1) => 0, (5,1) => 0, (6,0) => 56},
--mb stands for Multigraded Betti numbers
"mb"=>new HashTable from {(7,0) => A_0^35*A_1^28+A_0^34*A_1^29+A_0^33*A_1^30+A_0^32*A_1^31+A_0^31*A_1^32+A_0^30*A_1^33+A_0^29*A_1^34+A_0^28*A_1^35, (6,1) => 0, (7,1) => 0, (0,0) => A_0^7+A_0^6*A_1+A_0^5*A_1^2+A_0^4*A_1^3+A_0^3*A_1^4+A_0^2*A_1^5+A_0*A_1^6+A_1^7, (0,1) => 0, (1,0) => A_0^14*A_1+2*A_0^13*A_1^2+3*A_0^12*A_1^3+4*A_0^11*A_1^4+5*A_0^10*A_1^5+6*A_0^9*A_1^6+7*A_0^8*A_1^7+7*A_0^7*A_1^8+6*A_0^6*A_1^9+5*A_0^5*A_1^10+4*A_0^4*A_1^11+3*A_0^3*A_1^12+2*A_0^2*A_1^13+A_0*A_1^14, (2,0) => A_0^20*A_1^3+2*A_0^19*A_1^4+4*A_0^18*A_1^5+6*A_0^17*A_1^6+9*A_0^16*A_1^7+12*A_0^15*A_1^8+15*A_0^14*A_1^9+17*A_0^13*A_1^10+18*A_0^12*A_1^11+18*A_0^11*A_1^12+17*A_0^10*A_1^13+15*A_0^9*A_1^14+12*A_0^8*A_1^15+9*A_0^7*A_1^16+6*A_0^6*A_1^17+4*A_0^5*A_1^18+2*A_0^4*A_1^19+A_0^3*A_1^20, (1,1) => 0, (2,1) => 0, (3,0) => A_0^25*A_1^6+2*A_0^24*A_1^7+4*A_0^23*A_1^8+7*A_0^22*A_1^9+11*A_0^21*A_1^10+15*A_0^20*A_1^11+20*A_0^19*A_1^12+24*A_0^18*A_1^13+27*A_0^17*A_1^14+29*A_0^16*A_1^15+29*A_0^15*A_1^16+27*A_0^14*A_1^17+24*A_0^13*A_1^18+20*A_0^12*A_1^19+15*A_0^11*A_1^20+11*A_0^10*A_1^21+7*A_0^9*A_1^22+4*A_0^8*A_1^23+2*A_0^7*A_1^24+A_0^6*A_1^25, (3,1) => 0, (4,0) => A_0^29*A_1^10+2*A_0^28*A_1^11+4*A_0^27*A_1^12+7*A_0^26*A_1^13+11*A_0^25*A_1^14+15*A_0^24*A_1^15+20*A_0^23*A_1^16+24*A_0^22*A_1^17+27*A_0^21*A_1^18+29*A_0^20*A_1^19+29*A_0^19*A_1^20+27*A_0^18*A_1^21+24*A_0^17*A_1^22+20*A_0^16*A_1^23+15*A_0^15*A_1^24+11*A_0^14*A_1^25+7*A_0^13*A_1^26+4*A_0^12*A_1^27+2*A_0^11*A_1^28+A_0^10*A_1^29, (4,1) => 0, (5,0) => A_0^32*A_1^15+2*A_0^31*A_1^16+4*A_0^30*A_1^17+6*A_0^29*A_1^18+9*A_0^28*A_1^19+12*A_0^27*A_1^20+15*A_0^26*A_1^21+17*A_0^25*A_1^22+18*A_0^24*A_1^23+18*A_0^23*A_1^24+17*A_0^22*A_1^25+15*A_0^21*A_1^26+12*A_0^20*A_1^27+9*A_0^19*A_1^28+6*A_0^18*A_1^29+4*A_0^17*A_1^30+2*A_0^16*A_1^31+A_0^15*A_1^32, (6,0) => A_0^34*A_1^21+2*A_0^33*A_1^22+3*A_0^32*A_1^23+4*A_0^31*A_1^24+5*A_0^30*A_1^25+6*A_0^29*A_1^26+7*A_0^28*A_1^27+7*A_0^27*A_1^28+6*A_0^26*A_1^29+5*A_0^25*A_1^30+4*A_0^24*A_1^31+3*A_0^23*A_1^32+2*A_0^22*A_1^33+A_0^21*A_1^34, (5,1) => 0},
--sb represents the betti numbers as sums of Schur functors
"sb"=>new HashTable from {(7,0) => {({35,28},1)}, (6,1) => {}, (7,1) => {}, (0,0) => {({7,0},1)}, (1,0) => {({14,1},1)}, (0,1) => {}, (2,0) => {({20,3},1)}, (1,1) => {}, (2,1) => {}, (3,0) => {({25,6},1)}, (3,1) => {}, (4,0) => {({29,10},1)}, (5,0) => {({32,15},1)}, (4,1) => {}, (5,1) => {}, (6,0) => {({34,21},1)}},
--dw encodes the dominant weights in each entry
"dw"=>new HashTable from {(7,0) => {{35,28}}, (6,1) => {}, (7,1) => {}, (0,0) => {{7,0}}, (1,0) => {{14,1}}, (0,1) => {}, (2,0) => {{20,3}}, (1,1) => {}, (2,1) => {}, (3,0) => {{25,6}}, (3,1) => {}, (4,0) => {{29,10}}, (5,0) => {{32,15}}, (4,1) => {}, (5,1) => {}, (6,0) => {{34,21}}},
--lw encodes the lex leading weight in each entry
"lw"=>new HashTable from {(7,0) => {35,28}, (6,1) => {}, (7,1) => {}, (0,0) => {7,0}, (1,0) => {14,1}, (0,1) => {}, (2,0) => {20,3}, (1,1) => {}, (2,1) => {}, (3,0) => {25,6}, (3,1) => {}, (4,0) => {29,10}, (5,0) => {32,15}, (4,1) => {}, (5,1) => {}, (6,0) => {34,21}},
--nr encodes the number of distinct representations in each entry
"nr"=>new HashTable from {(7,0) => 1, (6,1) => 0, (7,1) => 0, (0,0) => 1, (1,0) => 1, (0,1) => 0, (2,0) => 1, (1,1) => 0, (2,1) => 0, (3,0) => 1, (3,1) => 0, (4,0) => 1, (5,0) => 1, (4,1) => 0, (5,1) => 0, (6,0) => 1},
--nrm encodes the number of representations with multiplicity in each entry
"nrm"=>new HashTable from {(7,0) => 1, (6,1) => 0, (7,1) => 0, (0,0) => 1, (1,0) => 1, (0,1) => 0, (2,0) => 1, (1,1) => 0, (2,1) => 0, (3,0) => 1, (3,1) => 0, (4,0) => 1, (5,0) => 1, (4,1) => 0, (5,1) => 0, (6,0) => 1},
--er encodes the errors in the computed multigraded Hilbert series via our Schur method in each entry
"er"=>new HashTable from {(7,0) => 8, (6,1) => 0, (7,1) => 0, (0,0) => 8, (1,0) => 56, (0,1) => 0, (2,0) => 168, (1,1) => 0, (2,1) => 0, (3,0) => 280, (3,1) => 0, (4,0) => 280, (5,0) => 168, (4,1) => 0, (5,1) => 0, (6,0) => 56},
--bs encodes the Boij-Soederberg coefficients each entry
"bs"=>{40320/1},
}
