--This file computes Betti tables for P^1 for d = 10 and b = 5
A := degreesRing 2
new HashTable from {
--tb stands for Total Betti numbers
"tb"=>new HashTable from {(7,0) => 0, (6,1) => 120, (7,1) => 90, (8,0) => 0, (8,1) => 30, (9,0) => 0, (9,1) => 4, (0,0) => 6, (0,1) => 0, (1,0) => 50, (2,0) => 180, (1,1) => 0, (3,0) => 360, (2,1) => 0, (4,0) => 420, (3,1) => 0, (5,0) => 252, (4,1) => 0, (5,1) => 0, (6,0) => 0},
--mb stands for Multigraded Betti numbers
"mb"=>new HashTable from {(7,0) => 0, (6,1) => A_0^48*A_1^27+A_0^47*A_1^28+2*A_0^46*A_1^29+3*A_0^45*A_1^30+4*A_0^44*A_1^31+5*A_0^43*A_1^32+7*A_0^42*A_1^33+8*A_0^41*A_1^34+9*A_0^40*A_1^35+10*A_0^39*A_1^36+10*A_0^38*A_1^37+10*A_0^37*A_1^38+10*A_0^36*A_1^39+9*A_0^35*A_1^40+8*A_0^34*A_1^41+7*A_0^33*A_1^42+5*A_0^32*A_1^43+4*A_0^31*A_1^44+3*A_0^30*A_1^45+2*A_0^29*A_1^46+A_0^28*A_1^47+A_0^27*A_1^48, (8,0) => 0, (7,1) => A_0^51*A_1^34+2*A_0^50*A_1^35+3*A_0^49*A_1^36+4*A_0^48*A_1^37+5*A_0^47*A_1^38+6*A_0^46*A_1^39+7*A_0^45*A_1^40+8*A_0^44*A_1^41+9*A_0^43*A_1^42+9*A_0^42*A_1^43+8*A_0^41*A_1^44+7*A_0^40*A_1^45+6*A_0^39*A_1^46+5*A_0^38*A_1^47+4*A_0^37*A_1^48+3*A_0^36*A_1^49+2*A_0^35*A_1^50+A_0^34*A_1^51, (9,0) => 0, (8,1) => A_0^53*A_1^42+2*A_0^52*A_1^43+3*A_0^51*A_1^44+3*A_0^50*A_1^45+3*A_0^49*A_1^46+3*A_0^48*A_1^47+3*A_0^47*A_1^48+3*A_0^46*A_1^49+3*A_0^45*A_1^50+3*A_0^44*A_1^51+2*A_0^43*A_1^52+A_0^42*A_1^53, (9,1) => A_0^54*A_1^51+A_0^53*A_1^52+A_0^52*A_1^53+A_0^51*A_1^54, (0,0) => A_0^5+A_0^4*A_1+A_0^3*A_1^2+A_0^2*A_1^3+A_0*A_1^4+A_1^5, (0,1) => 0, (1,0) => A_0^14*A_1+2*A_0^13*A_1^2+3*A_0^12*A_1^3+4*A_0^11*A_1^4+5*A_0^10*A_1^5+5*A_0^9*A_1^6+5*A_0^8*A_1^7+5*A_0^7*A_1^8+5*A_0^6*A_1^9+5*A_0^5*A_1^10+4*A_0^4*A_1^11+3*A_0^3*A_1^12+2*A_0^2*A_1^13+A_0*A_1^14, (2,0) => A_0^22*A_1^3+2*A_0^21*A_1^4+4*A_0^20*A_1^5+6*A_0^19*A_1^6+8*A_0^18*A_1^7+10*A_0^17*A_1^8+12*A_0^16*A_1^9+14*A_0^15*A_1^10+16*A_0^14*A_1^11+17*A_0^13*A_1^12+17*A_0^12*A_1^13+16*A_0^11*A_1^14+14*A_0^10*A_1^15+12*A_0^9*A_1^16+10*A_0^8*A_1^17+8*A_0^7*A_1^18+6*A_0^6*A_1^19+4*A_0^5*A_1^20+2*A_0^4*A_1^21+A_0^3*A_1^22, (1,1) => 0, (2,1) => 0, (3,0) => A_0^29*A_1^6+2*A_0^28*A_1^7+4*A_0^27*A_1^8+6*A_0^26*A_1^9+9*A_0^25*A_1^10+12*A_0^24*A_1^11+16*A_0^23*A_1^12+20*A_0^22*A_1^13+24*A_0^21*A_1^14+27*A_0^20*A_1^15+29*A_0^19*A_1^16+30*A_0^18*A_1^17+30*A_0^17*A_1^18+29*A_0^16*A_1^19+27*A_0^15*A_1^20+24*A_0^14*A_1^21+20*A_0^13*A_1^22+16*A_0^12*A_1^23+12*A_0^11*A_1^24+9*A_0^10*A_1^25+6*A_0^9*A_1^26+4*A_0^8*A_1^27+2*A_0^7*A_1^28+A_0^6*A_1^29, (3,1) => 0, (4,0) => A_0^35*A_1^10+2*A_0^34*A_1^11+3*A_0^33*A_1^12+5*A_0^32*A_1^13+8*A_0^31*A_1^14+11*A_0^30*A_1^15+15*A_0^29*A_1^16+19*A_0^28*A_1^17+23*A_0^27*A_1^18+27*A_0^26*A_1^19+30*A_0^25*A_1^20+32*A_0^24*A_1^21+34*A_0^23*A_1^22+34*A_0^22*A_1^23+32*A_0^21*A_1^24+30*A_0^20*A_1^25+27*A_0^19*A_1^26+23*A_0^18*A_1^27+19*A_0^17*A_1^28+15*A_0^16*A_1^29+11*A_0^15*A_1^30+8*A_0^14*A_1^31+5*A_0^13*A_1^32+3*A_0^12*A_1^33+2*A_0^11*A_1^34+A_0^10*A_1^35, (4,1) => 0, (5,0) => A_0^40*A_1^15+A_0^39*A_1^16+2*A_0^38*A_1^17+3*A_0^37*A_1^18+5*A_0^36*A_1^19+7*A_0^35*A_1^20+9*A_0^34*A_1^21+11*A_0^33*A_1^22+14*A_0^32*A_1^23+16*A_0^31*A_1^24+18*A_0^30*A_1^25+19*A_0^29*A_1^26+20*A_0^28*A_1^27+20*A_0^27*A_1^28+19*A_0^26*A_1^29+18*A_0^25*A_1^30+16*A_0^24*A_1^31+14*A_0^23*A_1^32+11*A_0^22*A_1^33+9*A_0^21*A_1^34+7*A_0^20*A_1^35+5*A_0^19*A_1^36+3*A_0^18*A_1^37+2*A_0^17*A_1^38+A_0^16*A_1^39+A_0^15*A_1^40, (6,0) => 0, (5,1) => 0},
--sb represents the betti numbers as sums of Schur functors
"sb"=>new HashTable from {(7,0) => {}, (6,1) => {({48,27},1)}, (7,1) => {({51,34},1)}, (8,0) => {}, (8,1) => {({53,42},1)}, (9,0) => {}, (9,1) => {({54,51},1)}, (0,0) => {({5,0},1)}, (0,1) => {}, (1,0) => {({14,1},1)}, (2,0) => {({22,3},1)}, (1,1) => {}, (3,0) => {({29,6},1)}, (2,1) => {}, (4,0) => {({35,10},1)}, (3,1) => {}, (5,0) => {({40,15},1)}, (4,1) => {}, (5,1) => {}, (6,0) => {}},
--dw encodes the dominant weights in each entry
"dw"=>new HashTable from {(7,0) => {}, (6,1) => {{48,27}}, (7,1) => {{51,34}}, (8,0) => {}, (8,1) => {{53,42}}, (9,0) => {}, (9,1) => {{54,51}}, (0,0) => {{5,0}}, (0,1) => {}, (1,0) => {{14,1}}, (2,0) => {{22,3}}, (1,1) => {}, (3,0) => {{29,6}}, (2,1) => {}, (4,0) => {{35,10}}, (3,1) => {}, (5,0) => {{40,15}}, (4,1) => {}, (5,1) => {}, (6,0) => {}},
--lw encodes the lex leading weight in each entry
"lw"=>new HashTable from {(7,0) => {}, (6,1) => {48,27}, (7,1) => {51,34}, (8,0) => {}, (8,1) => {53,42}, (9,0) => {}, (9,1) => {54,51}, (0,0) => {5,0}, (0,1) => {}, (1,0) => {14,1}, (2,0) => {22,3}, (1,1) => {}, (3,0) => {29,6}, (2,1) => {}, (4,0) => {35,10}, (3,1) => {}, (5,0) => {40,15}, (4,1) => {}, (5,1) => {}, (6,0) => {}},
--nr encodes the number of distinct representations in each entry
"nr"=>new HashTable from {(7,0) => 0, (6,1) => 1, (7,1) => 1, (8,0) => 0, (8,1) => 1, (9,0) => 0, (9,1) => 1, (0,0) => 1, (0,1) => 0, (1,0) => 1, (2,0) => 1, (1,1) => 0, (3,0) => 1, (2,1) => 0, (4,0) => 1, (3,1) => 0, (5,0) => 1, (4,1) => 0, (5,1) => 0, (6,0) => 0},
--nrm encodes the number of representations with multiplicity in each entry
"nrm"=>new HashTable from {(7,0) => 0, (6,1) => 1, (7,1) => 1, (8,0) => 0, (8,1) => 1, (9,0) => 0, (9,1) => 1, (0,0) => 1, (0,1) => 0, (1,0) => 1, (2,0) => 1, (1,1) => 0, (3,0) => 1, (2,1) => 0, (4,0) => 1, (3,1) => 0, (5,0) => 1, (4,1) => 0, (5,1) => 0, (6,0) => 0},
--er encodes the errors in the computed multigraded Hilbert series via our Schur method in each entry
"er"=>new HashTable from {(7,0) => 0, (6,1) => 120, (7,1) => 90, (8,0) => 0, (8,1) => 30, (9,0) => 0, (9,1) => 4, (0,0) => 6, (0,1) => 0, (1,0) => 50, (2,0) => 180, (1,1) => 0, (3,0) => 360, (2,1) => 0, (4,0) => 420, (3,1) => 0, (5,0) => 252, (4,1) => 0, (5,1) => 0, (6,0) => 0},
--bs encodes the Boij-Soederberg coefficients each entry
"bs"=>{3628800/1},
}
