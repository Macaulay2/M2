--This file computes Betti tables for P^1 for d = 10 and b = 4
A := degreesRing 2
new HashTable from {
--tb stands for Total Betti numbers
"tb"=>new HashTable from {(7,0) => 0, (6,1) => 240, (7,1) => 135, (8,0) => 0, (8,1) => 40, (9,0) => 0, (9,1) => 5, (0,0) => 5, (0,1) => 0, (1,0) => 40, (2,0) => 135, (1,1) => 0, (3,0) => 240, (2,1) => 0, (4,0) => 210, (3,1) => 0, (5,0) => 0, (4,1) => 0, (5,1) => 210, (6,0) => 0},
--mb stands for Multigraded Betti numbers
"mb"=>new HashTable from {(7,0) => 0, (6,1) => A_0^48*A_1^26+2*A_0^47*A_1^27+3*A_0^46*A_1^28+5*A_0^45*A_1^29+7*A_0^44*A_1^30+9*A_0^43*A_1^31+12*A_0^42*A_1^32+15*A_0^41*A_1^33+17*A_0^40*A_1^34+19*A_0^39*A_1^35+20*A_0^38*A_1^36+20*A_0^37*A_1^37+20*A_0^36*A_1^38+19*A_0^35*A_1^39+17*A_0^34*A_1^40+15*A_0^33*A_1^41+12*A_0^32*A_1^42+9*A_0^31*A_1^43+7*A_0^30*A_1^44+5*A_0^29*A_1^45+3*A_0^28*A_1^46+2*A_0^27*A_1^47+A_0^26*A_1^48, (8,0) => 0, (7,1) => A_0^51*A_1^33+2*A_0^50*A_1^34+4*A_0^49*A_1^35+5*A_0^48*A_1^36+7*A_0^47*A_1^37+8*A_0^46*A_1^38+10*A_0^45*A_1^39+11*A_0^44*A_1^40+13*A_0^43*A_1^41+13*A_0^42*A_1^42+13*A_0^41*A_1^43+11*A_0^40*A_1^44+10*A_0^39*A_1^45+8*A_0^38*A_1^46+7*A_0^37*A_1^47+5*A_0^36*A_1^48+4*A_0^35*A_1^49+2*A_0^34*A_1^50+A_0^33*A_1^51, (9,0) => 0, (8,1) => A_0^53*A_1^41+2*A_0^52*A_1^42+3*A_0^51*A_1^43+4*A_0^50*A_1^44+4*A_0^49*A_1^45+4*A_0^48*A_1^46+4*A_0^47*A_1^47+4*A_0^46*A_1^48+4*A_0^45*A_1^49+4*A_0^44*A_1^50+3*A_0^43*A_1^51+2*A_0^42*A_1^52+A_0^41*A_1^53, (9,1) => A_0^54*A_1^50+A_0^53*A_1^51+A_0^52*A_1^52+A_0^51*A_1^53+A_0^50*A_1^54, (0,0) => A_0^4+A_0^3*A_1+A_0^2*A_1^2+A_0*A_1^3+A_1^4, (0,1) => 0, (1,0) => A_0^13*A_1+2*A_0^12*A_1^2+3*A_0^11*A_1^3+4*A_0^10*A_1^4+4*A_0^9*A_1^5+4*A_0^8*A_1^6+4*A_0^7*A_1^7+4*A_0^6*A_1^8+4*A_0^5*A_1^9+4*A_0^4*A_1^10+3*A_0^3*A_1^11+2*A_0^2*A_1^12+A_0*A_1^13, (2,0) => A_0^21*A_1^3+2*A_0^20*A_1^4+4*A_0^19*A_1^5+5*A_0^18*A_1^6+7*A_0^17*A_1^7+8*A_0^16*A_1^8+10*A_0^15*A_1^9+11*A_0^14*A_1^10+13*A_0^13*A_1^11+13*A_0^12*A_1^12+13*A_0^11*A_1^13+11*A_0^10*A_1^14+10*A_0^9*A_1^15+8*A_0^8*A_1^16+7*A_0^7*A_1^17+5*A_0^6*A_1^18+4*A_0^5*A_1^19+2*A_0^4*A_1^20+A_0^3*A_1^21, (1,1) => 0, (2,1) => 0, (3,0) => A_0^28*A_1^6+2*A_0^27*A_1^7+3*A_0^26*A_1^8+5*A_0^25*A_1^9+7*A_0^24*A_1^10+9*A_0^23*A_1^11+12*A_0^22*A_1^12+15*A_0^21*A_1^13+17*A_0^20*A_1^14+19*A_0^19*A_1^15+20*A_0^18*A_1^16+20*A_0^17*A_1^17+20*A_0^16*A_1^18+19*A_0^15*A_1^19+17*A_0^14*A_1^20+15*A_0^13*A_1^21+12*A_0^12*A_1^22+9*A_0^11*A_1^23+7*A_0^10*A_1^24+5*A_0^9*A_1^25+3*A_0^8*A_1^26+2*A_0^7*A_1^27+A_0^6*A_1^28, (3,1) => 0, (4,0) => A_0^34*A_1^10+A_0^33*A_1^11+2*A_0^32*A_1^12+3*A_0^31*A_1^13+5*A_0^30*A_1^14+6*A_0^29*A_1^15+9*A_0^28*A_1^16+10*A_0^27*A_1^17+13*A_0^26*A_1^18+14*A_0^25*A_1^19+16*A_0^24*A_1^20+16*A_0^23*A_1^21+18*A_0^22*A_1^22+16*A_0^21*A_1^23+16*A_0^20*A_1^24+14*A_0^19*A_1^25+13*A_0^18*A_1^26+10*A_0^17*A_1^27+9*A_0^16*A_1^28+6*A_0^15*A_1^29+5*A_0^14*A_1^30+3*A_0^13*A_1^31+2*A_0^12*A_1^32+A_0^11*A_1^33+A_0^10*A_1^34, (4,1) => 0, (5,0) => 0, (6,0) => 0, (5,1) => A_0^44*A_1^20+A_0^43*A_1^21+2*A_0^42*A_1^22+3*A_0^41*A_1^23+5*A_0^40*A_1^24+6*A_0^39*A_1^25+9*A_0^38*A_1^26+10*A_0^37*A_1^27+13*A_0^36*A_1^28+14*A_0^35*A_1^29+16*A_0^34*A_1^30+16*A_0^33*A_1^31+18*A_0^32*A_1^32+16*A_0^31*A_1^33+16*A_0^30*A_1^34+14*A_0^29*A_1^35+13*A_0^28*A_1^36+10*A_0^27*A_1^37+9*A_0^26*A_1^38+6*A_0^25*A_1^39+5*A_0^24*A_1^40+3*A_0^23*A_1^41+2*A_0^22*A_1^42+A_0^21*A_1^43+A_0^20*A_1^44},
--sb represents the betti numbers as sums of Schur functors
"sb"=>new HashTable from {(7,0) => {}, (6,1) => {({48,26},1)}, (7,1) => {({51,33},1)}, (8,0) => {}, (8,1) => {({53,41},1)}, (9,0) => {}, (9,1) => {({54,50},1)}, (0,0) => {({4,0},1)}, (0,1) => {}, (1,0) => {({13,1},1)}, (2,0) => {({21,3},1)}, (1,1) => {}, (3,0) => {({28,6},1)}, (2,1) => {}, (4,0) => {({34,10},1)}, (3,1) => {}, (5,0) => {}, (4,1) => {}, (5,1) => {({44,20},1)}, (6,0) => {}},
--dw encodes the dominant weights in each entry
"dw"=>new HashTable from {(7,0) => {}, (6,1) => {{48,26}}, (7,1) => {{51,33}}, (8,0) => {}, (8,1) => {{53,41}}, (9,0) => {}, (9,1) => {{54,50}}, (0,0) => {{4,0}}, (0,1) => {}, (1,0) => {{13,1}}, (2,0) => {{21,3}}, (1,1) => {}, (3,0) => {{28,6}}, (2,1) => {}, (4,0) => {{34,10}}, (3,1) => {}, (5,0) => {}, (4,1) => {}, (5,1) => {{44,20}}, (6,0) => {}},
--lw encodes the lex leading weight in each entry
"lw"=>new HashTable from {(7,0) => {}, (6,1) => {48,26}, (7,1) => {51,33}, (8,0) => {}, (8,1) => {53,41}, (9,0) => {}, (9,1) => {54,50}, (0,0) => {4,0}, (0,1) => {}, (1,0) => {13,1}, (2,0) => {21,3}, (1,1) => {}, (3,0) => {28,6}, (2,1) => {}, (4,0) => {34,10}, (3,1) => {}, (5,0) => {}, (4,1) => {}, (5,1) => {44,20}, (6,0) => {}},
--nr encodes the number of distinct representations in each entry
"nr"=>new HashTable from {(7,0) => 0, (6,1) => 1, (7,1) => 1, (8,0) => 0, (8,1) => 1, (9,0) => 0, (9,1) => 1, (0,0) => 1, (0,1) => 0, (1,0) => 1, (2,0) => 1, (1,1) => 0, (3,0) => 1, (2,1) => 0, (4,0) => 1, (3,1) => 0, (5,0) => 0, (4,1) => 0, (5,1) => 1, (6,0) => 0},
--nrm encodes the number of representations with multiplicity in each entry
"nrm"=>new HashTable from {(7,0) => 0, (6,1) => 1, (7,1) => 1, (8,0) => 0, (8,1) => 1, (9,0) => 0, (9,1) => 1, (0,0) => 1, (0,1) => 0, (1,0) => 1, (2,0) => 1, (1,1) => 0, (3,0) => 1, (2,1) => 0, (4,0) => 1, (3,1) => 0, (5,0) => 0, (4,1) => 0, (5,1) => 1, (6,0) => 0},
--er encodes the errors in the computed multigraded Hilbert series via our Schur method in each entry
"er"=>new HashTable from {(7,0) => 0, (6,1) => 240, (7,1) => 135, (8,0) => 0, (8,1) => 40, (9,0) => 0, (9,1) => 5, (0,0) => 5, (0,1) => 0, (1,0) => 40, (2,0) => 135, (1,1) => 0, (3,0) => 240, (2,1) => 0, (4,0) => 210, (3,1) => 0, (5,0) => 0, (4,1) => 0, (5,1) => 210, (6,0) => 0},
--bs encodes the Boij-Soederberg coefficients each entry
"bs"=>{3628800/1},
}
