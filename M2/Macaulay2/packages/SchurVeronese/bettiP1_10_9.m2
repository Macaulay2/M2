--This file computes Betti tables for P^1 for d = 10 and b = 9
A := degreesRing 2
new HashTable from {
--tb stands for Total Betti numbers
"tb"=>new HashTable from {(7,0) => 360, (6,1) => 0, (7,1) => 0, (8,0) => 90, (8,1) => 0, (9,0) => 10, (9,1) => 0, (0,0) => 10, (0,1) => 0, (1,0) => 90, (2,0) => 360, (1,1) => 0, (3,0) => 840, (2,1) => 0, (4,0) => 1260, (3,1) => 0, (5,0) => 1260, (4,1) => 0, (5,1) => 0, (6,0) => 840},
--mb stands for Multigraded Betti numbers
"mb"=>new HashTable from {(7,0) => A_0^51*A_1^28+2*A_0^50*A_1^29+4*A_0^49*A_1^30+6*A_0^48*A_1^31+9*A_0^47*A_1^32+12*A_0^46*A_1^33+16*A_0^45*A_1^34+20*A_0^44*A_1^35+24*A_0^43*A_1^36+27*A_0^42*A_1^37+29*A_0^41*A_1^38+30*A_0^40*A_1^39+30*A_0^39*A_1^40+29*A_0^38*A_1^41+27*A_0^37*A_1^42+24*A_0^36*A_1^43+20*A_0^35*A_1^44+16*A_0^34*A_1^45+12*A_0^33*A_1^46+9*A_0^32*A_1^47+6*A_0^31*A_1^48+4*A_0^30*A_1^49+2*A_0^29*A_1^50+A_0^28*A_1^51, (6,1) => 0, (8,0) => A_0^53*A_1^36+2*A_0^52*A_1^37+3*A_0^51*A_1^38+4*A_0^50*A_1^39+5*A_0^49*A_1^40+6*A_0^48*A_1^41+7*A_0^47*A_1^42+8*A_0^46*A_1^43+9*A_0^45*A_1^44+9*A_0^44*A_1^45+8*A_0^43*A_1^46+7*A_0^42*A_1^47+6*A_0^41*A_1^48+5*A_0^40*A_1^49+4*A_0^39*A_1^50+3*A_0^38*A_1^51+2*A_0^37*A_1^52+A_0^36*A_1^53, (7,1) => 0, (9,0) => A_0^54*A_1^45+A_0^53*A_1^46+A_0^52*A_1^47+A_0^51*A_1^48+A_0^50*A_1^49+A_0^49*A_1^50+A_0^48*A_1^51+A_0^47*A_1^52+A_0^46*A_1^53+A_0^45*A_1^54, (8,1) => 0, (9,1) => 0, (0,0) => A_0^9+A_0^8*A_1+A_0^7*A_1^2+A_0^6*A_1^3+A_0^5*A_1^4+A_0^4*A_1^5+A_0^3*A_1^6+A_0^2*A_1^7+A_0*A_1^8+A_1^9, (0,1) => 0, (1,0) => A_0^18*A_1+2*A_0^17*A_1^2+3*A_0^16*A_1^3+4*A_0^15*A_1^4+5*A_0^14*A_1^5+6*A_0^13*A_1^6+7*A_0^12*A_1^7+8*A_0^11*A_1^8+9*A_0^10*A_1^9+9*A_0^9*A_1^10+8*A_0^8*A_1^11+7*A_0^7*A_1^12+6*A_0^6*A_1^13+5*A_0^5*A_1^14+4*A_0^4*A_1^15+3*A_0^3*A_1^16+2*A_0^2*A_1^17+A_0*A_1^18, (2,0) => A_0^26*A_1^3+2*A_0^25*A_1^4+4*A_0^24*A_1^5+6*A_0^23*A_1^6+9*A_0^22*A_1^7+12*A_0^21*A_1^8+16*A_0^20*A_1^9+20*A_0^19*A_1^10+24*A_0^18*A_1^11+27*A_0^17*A_1^12+29*A_0^16*A_1^13+30*A_0^15*A_1^14+30*A_0^14*A_1^15+29*A_0^13*A_1^16+27*A_0^12*A_1^17+24*A_0^11*A_1^18+20*A_0^10*A_1^19+16*A_0^9*A_1^20+12*A_0^8*A_1^21+9*A_0^7*A_1^22+6*A_0^6*A_1^23+4*A_0^5*A_1^24+2*A_0^4*A_1^25+A_0^3*A_1^26, (1,1) => 0, (2,1) => 0, (3,0) => A_0^33*A_1^6+2*A_0^32*A_1^7+4*A_0^31*A_1^8+7*A_0^30*A_1^9+11*A_0^29*A_1^10+16*A_0^28*A_1^11+23*A_0^27*A_1^12+30*A_0^26*A_1^13+38*A_0^25*A_1^14+46*A_0^24*A_1^15+53*A_0^23*A_1^16+59*A_0^22*A_1^17+64*A_0^21*A_1^18+66*A_0^20*A_1^19+66*A_0^19*A_1^20+64*A_0^18*A_1^21+59*A_0^17*A_1^22+53*A_0^16*A_1^23+46*A_0^15*A_1^24+38*A_0^14*A_1^25+30*A_0^13*A_1^26+23*A_0^12*A_1^27+16*A_0^11*A_1^28+11*A_0^10*A_1^29+7*A_0^9*A_1^30+4*A_0^8*A_1^31+2*A_0^7*A_1^32+A_0^6*A_1^33, (3,1) => 0, (4,0) => A_0^39*A_1^10+2*A_0^38*A_1^11+4*A_0^37*A_1^12+7*A_0^36*A_1^13+12*A_0^35*A_1^14+18*A_0^34*A_1^15+26*A_0^33*A_1^16+35*A_0^32*A_1^17+46*A_0^31*A_1^18+57*A_0^30*A_1^19+68*A_0^29*A_1^20+78*A_0^28*A_1^21+87*A_0^27*A_1^22+93*A_0^26*A_1^23+96*A_0^25*A_1^24+96*A_0^24*A_1^25+93*A_0^23*A_1^26+87*A_0^22*A_1^27+78*A_0^21*A_1^28+68*A_0^20*A_1^29+57*A_0^19*A_1^30+46*A_0^18*A_1^31+35*A_0^17*A_1^32+26*A_0^16*A_1^33+18*A_0^15*A_1^34+12*A_0^14*A_1^35+7*A_0^13*A_1^36+4*A_0^12*A_1^37+2*A_0^11*A_1^38+A_0^10*A_1^39, (4,1) => 0, (5,0) => A_0^44*A_1^15+2*A_0^43*A_1^16+4*A_0^42*A_1^17+7*A_0^41*A_1^18+12*A_0^40*A_1^19+18*A_0^39*A_1^20+26*A_0^38*A_1^21+35*A_0^37*A_1^22+46*A_0^36*A_1^23+57*A_0^35*A_1^24+68*A_0^34*A_1^25+78*A_0^33*A_1^26+87*A_0^32*A_1^27+93*A_0^31*A_1^28+96*A_0^30*A_1^29+96*A_0^29*A_1^30+93*A_0^28*A_1^31+87*A_0^27*A_1^32+78*A_0^26*A_1^33+68*A_0^25*A_1^34+57*A_0^24*A_1^35+46*A_0^23*A_1^36+35*A_0^22*A_1^37+26*A_0^21*A_1^38+18*A_0^20*A_1^39+12*A_0^19*A_1^40+7*A_0^18*A_1^41+4*A_0^17*A_1^42+2*A_0^16*A_1^43+A_0^15*A_1^44, (6,0) => A_0^48*A_1^21+2*A_0^47*A_1^22+4*A_0^46*A_1^23+7*A_0^45*A_1^24+11*A_0^44*A_1^25+16*A_0^43*A_1^26+23*A_0^42*A_1^27+30*A_0^41*A_1^28+38*A_0^40*A_1^29+46*A_0^39*A_1^30+53*A_0^38*A_1^31+59*A_0^37*A_1^32+64*A_0^36*A_1^33+66*A_0^35*A_1^34+66*A_0^34*A_1^35+64*A_0^33*A_1^36+59*A_0^32*A_1^37+53*A_0^31*A_1^38+46*A_0^30*A_1^39+38*A_0^29*A_1^40+30*A_0^28*A_1^41+23*A_0^27*A_1^42+16*A_0^26*A_1^43+11*A_0^25*A_1^44+7*A_0^24*A_1^45+4*A_0^23*A_1^46+2*A_0^22*A_1^47+A_0^21*A_1^48, (5,1) => 0},
--sb represents the betti numbers as sums of Schur functors
"sb"=>new HashTable from {(7,0) => {({51,28},1)}, (6,1) => {}, (7,1) => {}, (8,0) => {({53,36},1)}, (8,1) => {}, (9,0) => {({54,45},1)}, (9,1) => {}, (0,0) => {({9,0},1)}, (0,1) => {}, (1,0) => {({18,1},1)}, (2,0) => {({26,3},1)}, (1,1) => {}, (3,0) => {({33,6},1)}, (2,1) => {}, (4,0) => {({39,10},1)}, (3,1) => {}, (5,0) => {({44,15},1)}, (4,1) => {}, (5,1) => {}, (6,0) => {({48,21},1)}},
--dw encodes the dominant weights in each entry
"dw"=>new HashTable from {(7,0) => {{51,28}}, (6,1) => {}, (7,1) => {}, (8,0) => {{53,36}}, (8,1) => {}, (9,0) => {{54,45}}, (9,1) => {}, (0,0) => {{9,0}}, (0,1) => {}, (1,0) => {{18,1}}, (2,0) => {{26,3}}, (1,1) => {}, (3,0) => {{33,6}}, (2,1) => {}, (4,0) => {{39,10}}, (3,1) => {}, (5,0) => {{44,15}}, (4,1) => {}, (5,1) => {}, (6,0) => {{48,21}}},
--lw encodes the lex leading weight in each entry
"lw"=>new HashTable from {(7,0) => {51,28}, (6,1) => {}, (7,1) => {}, (8,0) => {53,36}, (8,1) => {}, (9,0) => {54,45}, (9,1) => {}, (0,0) => {9,0}, (0,1) => {}, (1,0) => {18,1}, (2,0) => {26,3}, (1,1) => {}, (3,0) => {33,6}, (2,1) => {}, (4,0) => {39,10}, (3,1) => {}, (5,0) => {44,15}, (4,1) => {}, (5,1) => {}, (6,0) => {48,21}},
--nr encodes the number of distinct representations in each entry
"nr"=>new HashTable from {(7,0) => 1, (6,1) => 0, (7,1) => 0, (8,0) => 1, (8,1) => 0, (9,0) => 1, (9,1) => 0, (0,0) => 1, (0,1) => 0, (1,0) => 1, (2,0) => 1, (1,1) => 0, (3,0) => 1, (2,1) => 0, (4,0) => 1, (3,1) => 0, (5,0) => 1, (4,1) => 0, (5,1) => 0, (6,0) => 1},
--nrm encodes the number of representations with multiplicity in each entry
"nrm"=>new HashTable from {(7,0) => 1, (6,1) => 0, (7,1) => 0, (8,0) => 1, (8,1) => 0, (9,0) => 1, (9,1) => 0, (0,0) => 1, (0,1) => 0, (1,0) => 1, (2,0) => 1, (1,1) => 0, (3,0) => 1, (2,1) => 0, (4,0) => 1, (3,1) => 0, (5,0) => 1, (4,1) => 0, (5,1) => 0, (6,0) => 1},
--er encodes the errors in the computed multigraded Hilbert series via our Schur method in each entry
"er"=>new HashTable from {(7,0) => 360, (6,1) => 0, (7,1) => 0, (8,0) => 90, (8,1) => 0, (9,0) => 10, (9,1) => 0, (0,0) => 10, (0,1) => 0, (1,0) => 90, (2,0) => 360, (1,1) => 0, (3,0) => 840, (2,1) => 0, (4,0) => 1260, (3,1) => 0, (5,0) => 1260, (4,1) => 0, (5,1) => 0, (6,0) => 840},
--bs encodes the Boij-Soederberg coefficients each entry
"bs"=>{3628800/1},
}
