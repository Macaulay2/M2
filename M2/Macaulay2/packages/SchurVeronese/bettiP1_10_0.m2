--This file computes Betti tables for P^1 for d = 10 and b = 0
A := degreesRing 2
new HashTable from {
--tb stands for Total Betti numbers
"tb"=>new HashTable from {(7,0) => 0, (6,1) => 720, (7,1) => 315, (8,0) => 0, (8,1) => 80, (9,0) => 0, (9,1) => 9, (0,0) => 1, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => 45, (3,0) => 0, (2,1) => 240, (4,0) => 0, (3,1) => 630, (5,0) => 0, (4,1) => 1008, (5,1) => 1050, (6,0) => 0},
--mb stands for Multigraded Betti numbers
"mb"=>new HashTable from {(7,0) => 0, (6,1) => A_0^48*A_1^22+2*A_0^47*A_1^23+4*A_0^46*A_1^24+7*A_0^45*A_1^25+11*A_0^44*A_1^26+16*A_0^43*A_1^27+22*A_0^42*A_1^28+29*A_0^41*A_1^29+36*A_0^40*A_1^30+43*A_0^39*A_1^31+49*A_0^38*A_1^32+54*A_0^37*A_1^33+57*A_0^36*A_1^34+58*A_0^35*A_1^35+57*A_0^34*A_1^36+54*A_0^33*A_1^37+49*A_0^32*A_1^38+43*A_0^31*A_1^39+36*A_0^30*A_1^40+29*A_0^29*A_1^41+22*A_0^28*A_1^42+16*A_0^27*A_1^43+11*A_0^26*A_1^44+7*A_0^25*A_1^45+4*A_0^24*A_1^46+2*A_0^23*A_1^47+A_0^22*A_1^48, (8,0) => 0, (7,1) => A_0^51*A_1^29+2*A_0^50*A_1^30+4*A_0^49*A_1^31+6*A_0^48*A_1^32+9*A_0^47*A_1^33+12*A_0^46*A_1^34+16*A_0^45*A_1^35+19*A_0^44*A_1^36+23*A_0^43*A_1^37+25*A_0^42*A_1^38+27*A_0^41*A_1^39+27*A_0^40*A_1^40+27*A_0^39*A_1^41+25*A_0^38*A_1^42+23*A_0^37*A_1^43+19*A_0^36*A_1^44+16*A_0^35*A_1^45+12*A_0^34*A_1^46+9*A_0^33*A_1^47+6*A_0^32*A_1^48+4*A_0^31*A_1^49+2*A_0^30*A_1^50+A_0^29*A_1^51, (9,0) => 0, (8,1) => A_0^53*A_1^37+2*A_0^52*A_1^38+3*A_0^51*A_1^39+4*A_0^50*A_1^40+5*A_0^49*A_1^41+6*A_0^48*A_1^42+7*A_0^47*A_1^43+8*A_0^46*A_1^44+8*A_0^45*A_1^45+8*A_0^44*A_1^46+7*A_0^43*A_1^47+6*A_0^42*A_1^48+5*A_0^41*A_1^49+4*A_0^40*A_1^50+3*A_0^39*A_1^51+2*A_0^38*A_1^52+A_0^37*A_1^53, (9,1) => A_0^54*A_1^46+A_0^53*A_1^47+A_0^52*A_1^48+A_0^51*A_1^49+A_0^50*A_1^50+A_0^49*A_1^51+A_0^48*A_1^52+A_0^47*A_1^53+A_0^46*A_1^54, (0,0) => 1, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => A_0^18*A_1^2+A_0^17*A_1^3+2*A_0^16*A_1^4+2*A_0^15*A_1^5+3*A_0^14*A_1^6+3*A_0^13*A_1^7+4*A_0^12*A_1^8+4*A_0^11*A_1^9+5*A_0^10*A_1^10+4*A_0^9*A_1^11+4*A_0^8*A_1^12+3*A_0^7*A_1^13+3*A_0^6*A_1^14+2*A_0^5*A_1^15+2*A_0^4*A_1^16+A_0^3*A_1^17+A_0^2*A_1^18, (2,1) => A_0^26*A_1^4+2*A_0^25*A_1^5+3*A_0^24*A_1^6+5*A_0^23*A_1^7+7*A_0^22*A_1^8+9*A_0^21*A_1^9+12*A_0^20*A_1^10+15*A_0^19*A_1^11+17*A_0^18*A_1^12+19*A_0^17*A_1^13+20*A_0^16*A_1^14+20*A_0^15*A_1^15+20*A_0^14*A_1^16+19*A_0^13*A_1^17+17*A_0^12*A_1^18+15*A_0^11*A_1^19+12*A_0^10*A_1^20+9*A_0^9*A_1^21+7*A_0^8*A_1^22+5*A_0^7*A_1^23+3*A_0^6*A_1^24+2*A_0^5*A_1^25+A_0^4*A_1^26, (3,0) => 0, (3,1) => A_0^33*A_1^7+2*A_0^32*A_1^8+4*A_0^31*A_1^9+6*A_0^30*A_1^10+10*A_0^29*A_1^11+14*A_0^28*A_1^12+20*A_0^27*A_1^13+25*A_0^26*A_1^14+32*A_0^25*A_1^15+37*A_0^24*A_1^16+43*A_0^23*A_1^17+46*A_0^22*A_1^18+50*A_0^21*A_1^19+50*A_0^20*A_1^20+50*A_0^19*A_1^21+46*A_0^18*A_1^22+43*A_0^17*A_1^23+37*A_0^16*A_1^24+32*A_0^15*A_1^25+25*A_0^14*A_1^26+20*A_0^13*A_1^27+14*A_0^12*A_1^28+10*A_0^11*A_1^29+6*A_0^10*A_1^30+4*A_0^9*A_1^31+2*A_0^8*A_1^32+A_0^7*A_1^33, (4,0) => 0, (4,1) => A_0^39*A_1^11+2*A_0^38*A_1^12+4*A_0^37*A_1^13+7*A_0^36*A_1^14+11*A_0^35*A_1^15+17*A_0^34*A_1^16+24*A_0^33*A_1^17+32*A_0^32*A_1^18+41*A_0^31*A_1^19+50*A_0^30*A_1^20+59*A_0^29*A_1^21+67*A_0^28*A_1^22+73*A_0^27*A_1^23+77*A_0^26*A_1^24+78*A_0^25*A_1^25+77*A_0^24*A_1^26+73*A_0^23*A_1^27+67*A_0^22*A_1^28+59*A_0^21*A_1^29+50*A_0^20*A_1^30+41*A_0^19*A_1^31+32*A_0^18*A_1^32+24*A_0^17*A_1^33+17*A_0^16*A_1^34+11*A_0^15*A_1^35+7*A_0^14*A_1^36+4*A_0^13*A_1^37+2*A_0^12*A_1^38+A_0^11*A_1^39, (5,0) => 0, (6,0) => 0, (5,1) => A_0^44*A_1^16+2*A_0^43*A_1^17+4*A_0^42*A_1^18+7*A_0^41*A_1^19+12*A_0^40*A_1^20+17*A_0^39*A_1^21+25*A_0^38*A_1^22+33*A_0^37*A_1^23+43*A_0^36*A_1^24+52*A_0^35*A_1^25+62*A_0^34*A_1^26+69*A_0^33*A_1^27+77*A_0^32*A_1^28+80*A_0^31*A_1^29+82*A_0^30*A_1^30+80*A_0^29*A_1^31+77*A_0^28*A_1^32+69*A_0^27*A_1^33+62*A_0^26*A_1^34+52*A_0^25*A_1^35+43*A_0^24*A_1^36+33*A_0^23*A_1^37+25*A_0^22*A_1^38+17*A_0^21*A_1^39+12*A_0^20*A_1^40+7*A_0^19*A_1^41+4*A_0^18*A_1^42+2*A_0^17*A_1^43+A_0^16*A_1^44},
--sb represents the betti numbers as sums of Schur functors
"sb"=>new HashTable from {(7,0) => {}, (6,1) => {({48,22},1)}, (7,1) => {({51,29},1)}, (8,0) => {}, (8,1) => {({53,37},1)}, (9,0) => {}, (9,1) => {({54,46},1)}, (0,0) => {({0,0},1)}, (0,1) => {}, (1,0) => {}, (2,0) => {}, (1,1) => {({18,2},1)}, (3,0) => {}, (2,1) => {({26,4},1)}, (4,0) => {}, (3,1) => {({33,7},1)}, (5,0) => {}, (4,1) => {({39,11},1)}, (5,1) => {({44,16},1)}, (6,0) => {}},
--dw encodes the dominant weights in each entry
"dw"=>new HashTable from {(7,0) => {}, (6,1) => {{48,22}}, (7,1) => {{51,29}}, (8,0) => {}, (8,1) => {{53,37}}, (9,0) => {}, (9,1) => {{54,46}}, (0,0) => {{0,0}}, (0,1) => {}, (1,0) => {}, (2,0) => {}, (1,1) => {{18,2}}, (3,0) => {}, (2,1) => {{26,4}}, (4,0) => {}, (3,1) => {{33,7}}, (5,0) => {}, (4,1) => {{39,11}}, (5,1) => {{44,16}}, (6,0) => {}},
--lw encodes the lex leading weight in each entry
"lw"=>new HashTable from {(7,0) => {}, (6,1) => {48,22}, (7,1) => {51,29}, (8,0) => {}, (8,1) => {53,37}, (9,0) => {}, (9,1) => {54,46}, (0,0) => {0,0}, (0,1) => {}, (1,0) => {}, (2,0) => {}, (1,1) => {18,2}, (3,0) => {}, (2,1) => {26,4}, (4,0) => {}, (3,1) => {33,7}, (5,0) => {}, (4,1) => {39,11}, (5,1) => {44,16}, (6,0) => {}},
--nr encodes the number of distinct representations in each entry
"nr"=>new HashTable from {(7,0) => 0, (6,1) => 1, (7,1) => 1, (8,0) => 0, (8,1) => 1, (9,0) => 0, (9,1) => 1, (0,0) => 1, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => 1, (3,0) => 0, (2,1) => 1, (4,0) => 0, (3,1) => 1, (5,0) => 0, (4,1) => 1, (5,1) => 1, (6,0) => 0},
--nrm encodes the number of representations with multiplicity in each entry
"nrm"=>new HashTable from {(7,0) => 0, (6,1) => 1, (7,1) => 1, (8,0) => 0, (8,1) => 1, (9,0) => 0, (9,1) => 1, (0,0) => 1, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => 1, (3,0) => 0, (2,1) => 1, (4,0) => 0, (3,1) => 1, (5,0) => 0, (4,1) => 1, (5,1) => 1, (6,0) => 0},
--er encodes the errors in the computed multigraded Hilbert series via our Schur method in each entry
"er"=>new HashTable from {(7,0) => 0, (6,1) => 720, (7,1) => 315, (8,0) => 0, (8,1) => 80, (9,0) => 0, (9,1) => 9, (0,0) => 1, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => 45, (3,0) => 0, (2,1) => 240, (4,0) => 0, (3,1) => 630, (5,0) => 0, (4,1) => 1008, (5,1) => 1050, (6,0) => 0},
--bs encodes the Boij-Soederberg coefficients each entry
"bs"=>{3628800/1},
}
