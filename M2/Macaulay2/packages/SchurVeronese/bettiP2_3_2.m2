--This file computes Betti tables for P^2 for d = 3 and b = 2
A := degreesRing 3
new HashTable from {
--tb stands for Total Betti numbers
"tb"=>new HashTable from {(7,0) => 0, (6,1) => 15, (5,2) => 0, (6,2) => 0, (7,1) => 3, (7,2) => 0, (0,0) => 6, (1,0) => 39, (0,1) => 0, (1,1) => 0, (0,2) => 0, (2,0) => 105, (3,0) => 147, (2,1) => 0, (1,2) => 0, (3,1) => 0, (2,2) => 0, (4,0) => 105, (3,2) => 0, (4,1) => 0, (5,0) => 21, (4,2) => 0, (5,1) => 21, (6,0) => 0},
--mb stands for Multigraded Betti numbers
"mb"=>new HashTable from {(7,0) => 0, (6,1) => A_0^9*A_1^8*A_2^6+A_0^8*A_1^9*A_2^6+A_0^9*A_1^7*A_2^7+2*A_0^8*A_1^8*A_2^7+A_0^7*A_1^9*A_2^7+A_0^9*A_1^6*A_2^8+2*A_0^8*A_1^7*A_2^8+2*A_0^7*A_1^8*A_2^8+A_0^6*A_1^9*A_2^8+A_0^8*A_1^6*A_2^9+A_0^7*A_1^7*A_2^9+A_0^6*A_1^8*A_2^9, (5,2) => 0, (7,1) => A_0^9*A_1^9*A_2^8+A_0^9*A_1^8*A_2^9+A_0^8*A_1^9*A_2^9, (6,2) => 0, (7,2) => 0, (0,0) => A_0^2+A_0*A_1+A_1^2+A_0*A_2+A_1*A_2+A_2^2, (1,0) => A_0^4*A_1+2*A_0^3*A_1^2+2*A_0^2*A_1^3+A_0*A_1^4+A_0^4*A_2+3*A_0^3*A_1*A_2+4*A_0^2*A_1^2*A_2+3*A_0*A_1^3*A_2+A_1^4*A_2+2*A_0^3*A_2^2+4*A_0^2*A_1*A_2^2+4*A_0*A_1^2*A_2^2+2*A_1^3*A_2^2+2*A_0^2*A_2^3+3*A_0*A_1*A_2^3+2*A_1^2*A_2^3+A_0*A_2^4+A_1*A_2^4, (0,1) => 0, (1,1) => 0, (0,2) => 0, (2,0) => A_0^5*A_1^3+A_0^4*A_1^4+A_0^3*A_1^5+A_0^6*A_1*A_2+3*A_0^5*A_1^2*A_2+5*A_0^4*A_1^3*A_2+5*A_0^3*A_1^4*A_2+3*A_0^2*A_1^5*A_2+A_0*A_1^6*A_2+3*A_0^5*A_1*A_2^2+6*A_0^4*A_1^2*A_2^2+9*A_0^3*A_1^3*A_2^2+6*A_0^2*A_1^4*A_2^2+3*A_0*A_1^5*A_2^2+A_0^5*A_2^3+5*A_0^4*A_1*A_2^3+9*A_0^3*A_1^2*A_2^3+9*A_0^2*A_1^3*A_2^3+5*A_0*A_1^4*A_2^3+A_1^5*A_2^3+A_0^4*A_2^4+5*A_0^3*A_1*A_2^4+6*A_0^2*A_1^2*A_2^4+5*A_0*A_1^3*A_2^4+A_1^4*A_2^4+A_0^3*A_2^5+3*A_0^2*A_1*A_2^5+3*A_0*A_1^2*A_2^5+A_1^3*A_2^5+A_0*A_1*A_2^6, (1,2) => 0, (2,1) => 0, (3,0) => A_0^7*A_1^3*A_2+2*A_0^6*A_1^4*A_2+2*A_0^5*A_1^5*A_2+2*A_0^4*A_1^6*A_2+A_0^3*A_1^7*A_2+A_0^7*A_1^2*A_2^2+4*A_0^6*A_1^3*A_2^2+6*A_0^5*A_1^4*A_2^2+6*A_0^4*A_1^5*A_2^2+4*A_0^3*A_1^6*A_2^2+A_0^2*A_1^7*A_2^2+A_0^7*A_1*A_2^3+4*A_0^6*A_1^2*A_2^3+9*A_0^5*A_1^3*A_2^3+11*A_0^4*A_1^4*A_2^3+9*A_0^3*A_1^5*A_2^3+4*A_0^2*A_1^6*A_2^3+A_0*A_1^7*A_2^3+2*A_0^6*A_1*A_2^4+6*A_0^5*A_1^2*A_2^4+11*A_0^4*A_1^3*A_2^4+11*A_0^3*A_1^4*A_2^4+6*A_0^2*A_1^5*A_2^4+2*A_0*A_1^6*A_2^4+2*A_0^5*A_1*A_2^5+6*A_0^4*A_1^2*A_2^5+9*A_0^3*A_1^3*A_2^5+6*A_0^2*A_1^4*A_2^5+2*A_0*A_1^5*A_2^5+2*A_0^4*A_1*A_2^6+4*A_0^3*A_1^2*A_2^6+4*A_0^2*A_1^3*A_2^6+2*A_0*A_1^4*A_2^6+A_0^3*A_1*A_2^7+A_0^2*A_1^2*A_2^7+A_0*A_1^3*A_2^7, (4,0) => A_0^8*A_1^4*A_2^2+A_0^7*A_1^5*A_2^2+2*A_0^6*A_1^6*A_2^2+A_0^5*A_1^7*A_2^2+A_0^4*A_1^8*A_2^2+A_0^8*A_1^3*A_2^3+3*A_0^7*A_1^4*A_2^3+4*A_0^6*A_1^5*A_2^3+4*A_0^5*A_1^6*A_2^3+3*A_0^4*A_1^7*A_2^3+A_0^3*A_1^8*A_2^3+A_0^8*A_1^2*A_2^4+3*A_0^7*A_1^3*A_2^4+7*A_0^6*A_1^4*A_2^4+7*A_0^5*A_1^5*A_2^4+7*A_0^4*A_1^6*A_2^4+3*A_0^3*A_1^7*A_2^4+A_0^2*A_1^8*A_2^4+A_0^7*A_1^2*A_2^5+4*A_0^6*A_1^3*A_2^5+7*A_0^5*A_1^4*A_2^5+7*A_0^4*A_1^5*A_2^5+4*A_0^3*A_1^6*A_2^5+A_0^2*A_1^7*A_2^5+2*A_0^6*A_1^2*A_2^6+4*A_0^5*A_1^3*A_2^6+7*A_0^4*A_1^4*A_2^6+4*A_0^3*A_1^5*A_2^6+2*A_0^2*A_1^6*A_2^6+A_0^5*A_1^2*A_2^7+3*A_0^4*A_1^3*A_2^7+3*A_0^3*A_1^4*A_2^7+A_0^2*A_1^5*A_2^7+A_0^4*A_1^2*A_2^8+A_0^3*A_1^3*A_2^8+A_0^2*A_1^4*A_2^8, (2,2) => 0, (3,1) => 0, (5,0) => A_0^9*A_1^4*A_2^4+A_0^8*A_1^5*A_2^4+A_0^7*A_1^6*A_2^4+A_0^6*A_1^7*A_2^4+A_0^5*A_1^8*A_2^4+A_0^4*A_1^9*A_2^4+A_0^8*A_1^4*A_2^5+A_0^7*A_1^5*A_2^5+A_0^6*A_1^6*A_2^5+A_0^5*A_1^7*A_2^5+A_0^4*A_1^8*A_2^5+A_0^7*A_1^4*A_2^6+A_0^6*A_1^5*A_2^6+A_0^5*A_1^6*A_2^6+A_0^4*A_1^7*A_2^6+A_0^6*A_1^4*A_2^7+A_0^5*A_1^5*A_2^7+A_0^4*A_1^6*A_2^7+A_0^5*A_1^4*A_2^8+A_0^4*A_1^5*A_2^8+A_0^4*A_1^4*A_2^9, (4,1) => 0, (3,2) => 0, (6,0) => 0, (5,1) => A_0^8*A_1^8*A_2^4+A_0^8*A_1^7*A_2^5+A_0^7*A_1^8*A_2^5+2*A_0^8*A_1^6*A_2^6+2*A_0^7*A_1^7*A_2^6+2*A_0^6*A_1^8*A_2^6+A_0^8*A_1^5*A_2^7+2*A_0^7*A_1^6*A_2^7+2*A_0^6*A_1^7*A_2^7+A_0^5*A_1^8*A_2^7+A_0^8*A_1^4*A_2^8+A_0^7*A_1^5*A_2^8+2*A_0^6*A_1^6*A_2^8+A_0^5*A_1^7*A_2^8+A_0^4*A_1^8*A_2^8, (4,2) => 0},
--sb represents the betti numbers as sums of Schur functors
"sb"=>new HashTable from {(7,0) => {}, (6,1) => {({9,8,6},1/1)}, (5,2) => {}, (7,1) => {({9,9,8},1/1)}, (6,2) => {}, (7,2) => {}, (0,0) => {({2,0,0},1/1)}, (1,0) => {({4,1,0},1/1),({3,2,0},1/1)}, (0,1) => {}, (1,1) => {}, (0,2) => {}, (2,0) => {({6,1,1},1/1),({5,3,0},1/1),({5,2,1},1/1),({4,3,1},1/1),({3,3,2},1/1)}, (1,2) => {}, (2,1) => {}, (3,0) => {({7,3,1},1/1),({6,4,1},1/1),({6,3,2},1/1),({5,4,2},1/1),({5,3,3},1/1)}, (4,0) => {({8,4,2},1/1),({7,4,3},1/1),({6,6,2},1/1),({6,4,4},1/1)}, (2,2) => {}, (3,1) => {}, (5,0) => {({9,4,4},1/1)}, (4,1) => {}, (3,2) => {}, (6,0) => {}, (5,1) => {({8,8,4},1/1),({8,6,6},1/1)}, (4,2) => {}},
--dw encodes the dominant weights in each entry
"dw"=>new HashTable from {(7,0) => {}, (6,1) => {{9,8,6}}, (5,2) => {}, (6,2) => {}, (7,1) => {{9,9,8}}, (7,2) => {}, (0,0) => {{2,0,0}}, (1,0) => {{4,1,0}}, (0,1) => {}, (1,1) => {}, (0,2) => {}, (2,0) => {{6,1,1},{5,3,0}}, (3,0) => {{7,3,1}}, (2,1) => {}, (1,2) => {}, (3,1) => {}, (2,2) => {}, (4,0) => {{8,4,2}}, (3,2) => {}, (4,1) => {}, (5,0) => {{9,4,4}}, (4,2) => {}, (5,1) => {{8,8,4}}, (6,0) => {}},
--lw encodes the lex leading weight in each entry
"lw"=>new HashTable from {(7,0) => {}, (6,1) => {9,8,6}, (5,2) => {}, (6,2) => {}, (7,1) => {9,9,8}, (7,2) => {}, (0,0) => {2,0,0}, (1,0) => {4,1,0}, (0,1) => {}, (1,1) => {}, (0,2) => {}, (2,0) => {6,1,1}, (3,0) => {7,3,1}, (2,1) => {}, (1,2) => {}, (3,1) => {}, (2,2) => {}, (4,0) => {8,4,2}, (3,2) => {}, (4,1) => {}, (5,0) => {9,4,4}, (4,2) => {}, (5,1) => {8,8,4}, (6,0) => {}},
--nr encodes the number of distinct representations in each entry
"nr"=>new HashTable from {(7,0) => 0, (6,1) => 1, (5,2) => 0, (6,2) => 0, (7,1) => 1, (7,2) => 0, (0,0) => 1, (1,0) => 2, (0,1) => 0, (1,1) => 0, (0,2) => 0, (2,0) => 5, (3,0) => 5, (2,1) => 0, (1,2) => 0, (3,1) => 0, (2,2) => 0, (4,0) => 4, (3,2) => 0, (4,1) => 0, (5,0) => 1, (4,2) => 0, (5,1) => 2, (6,0) => 0},
--nrm encodes the number of representations with multiplicity in each entry
"nrm"=>new HashTable from {(7,0) => 0, (6,1) => 1/1, (5,2) => 0, (6,2) => 0, (7,1) => 1/1, (7,2) => 0, (0,0) => 1/1, (1,0) => 2/1, (0,1) => 0, (1,1) => 0, (0,2) => 0, (2,0) => 5/1, (3,0) => 5/1, (2,1) => 0, (1,2) => 0, (3,1) => 0, (2,2) => 0, (4,0) => 4/1, (3,2) => 0, (4,1) => 0, (5,0) => 1/1, (4,2) => 0, (5,1) => 2/1, (6,0) => 0},
--er encodes the errors in the computed multigraded Hilbert series via our Schur method in each entry
"er"=>new HashTable from {(7,0) => 0, (6,1) => 15, (5,2) => 0, (6,2) => 0, (7,1) => 3, (7,2) => 0, (0,0) => 6, (1,0) => 39, (0,1) => 0, (1,1) => 0, (0,2) => 0, (2,0) => 105, (3,0) => 147, (2,1) => 0, (1,2) => 0, (3,1) => 0, (2,2) => 0, (4,0) => 105, (3,2) => 0, (4,1) => 0, (5,0) => 21, (4,2) => 0, (5,1) => 21, (6,0) => 0},
--bs encodes the Boij-Soederberg coefficients each entry
"bs"=>{15120/1,30240/1},
}
