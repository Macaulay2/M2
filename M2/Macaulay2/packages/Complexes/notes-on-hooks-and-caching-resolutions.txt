handling R=field case within 'computation' feels like a kludge

runHooks -- running all hooks one by one until non-null is found, or just running one hook.

computation: (opts, container) -> does what?
container: output 

ResolutionComputation
ResolutionContext

fetchComputation
cacheComputation

isComputationDone ResolutionComputation (seems to check degree limit and length limit to check viability of previous result)
updateComputation(ResolutionComputation, result chain complex)

res.m2
computations.m2

    hooks: independent of caching results.

    caching:
      res Module
    stash result in M.cache#(Resolution, degreelimit, lengthlimit) (or add in the options we want)

    example:
      res M has been computed, and cached.
    then:
      res(M, DegreeLimit => 4) -- this looks into that cache, determines if computation is needed.
        if computation is needed: do it, and stash the new result, with new degree limit/length limit etc.
        if not, prune down the complex that is cached to this degree limit.

R = ZZ/101[a..d]
I = ideal vars R
M = R^1/I
gbTrace=3
C = res(M, Strategy => 0)
C1 = res(M, Strategy => 1) -- no computation.

restart
R = ZZ/101[a..j]
I = (ideal vars R)^[3]
M = R^1/I
gbTrace=3
C = res(M, Strategy => 0, DegreeLimit => 7, LengthLimit => 5, SyzygyLimit => 10)
C1 = res(M, Strategy => 0, DegreeLimit => 7, LengthLimit => 4)

C = res(M, Strategy => 0, DegreeLimit => 7, LengthLimit => 5)
C1 = res(M, Strategy => 1, LengthLimit => 6)
C1 = res(M, Strategy => 1) -- no computation.

  M.cache.Resolution(degree limit, length limit): ResolutionObject
  M.cache.Resolution: ResolutionObject(degree limit, length limit)

this happens before running hooks
if a resolution is cached:
  if a res with a different strategy is requested, throws out the old one, starts over.

totally order (LengthLimit, DegreeLimit) lexicographically
    cache in a module:
      ResolutionObject (should also have a length, degree limit pair)
      Resolution: a complex
        it the cache table: says it is a resolution with degree,length limits
        also has a pointer back to the module
    
res Module:
  look to see if there is a Resolution in the cache
     if the stashed complex has exactly the same Degree and Length limits
      return the cached complex
     if (lengthLimit, degreeLimit) < cached values (lexicographically)
      return the truncation of the cached complex
  look to see if there is a ResolutionObject in the cache
     if so
  if there is a ResolutionObject in the cache:
    if opts.Strategy is unspecified or matches the cached strategy (ResolutionObject knows the strategy)
    yes:
      do we need to do more computation? (depends on length limit/degree limit)
        (query ResolutionObject: returns one of three states (the first 2 are the same)
            are you complete in degrees <= (lengthlimit, degreelimit)? yes
            are you not yet done, but can be continued to compute that? yes 
            I cannot compute that: need to throw me out and start over. no
          yes: continue the computation to compute <= (lengthlimit, degreelimit).
               update the cache (cached Resolution is changed, also ResolutionObject might change itself)
               RETURN the cached Resolution
          no: drop though (the ResolutionObject needs to be replaced)
    no:
      drop through

  construct a new ResolutionObject, cache it (doesn't run the computation, just creates it). (sets isDone?, DegreeLimit, LengthLimit, Strategy).
  
  run hooks
    one of these will do computation (potentially).
      these hooks can count on the cache existing.
      but must set the strategy in this object, if unset.
      they must cache the data needed to continue a computation
        (if larger degree or length is needed)
        and they must allow if the computation is interrupted.
    
    
    
        
      
  
