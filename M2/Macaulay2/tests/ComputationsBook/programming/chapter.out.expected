i1 : w

o1 = w

o1 : Symbol
i2 : w = 2^100

o2 = 1267650600228229401496703205376
i3 : w

o3 = 1267650600228229401496703205376
i4 : (w,w') = (33,44)

o4 = (33, 44)

o4 : Sequence
i5 : w

o5 = 33
i6 : w'

o6 = 44
i7 : (w,w') = (33,   -- this is a comment
               44)

o7 = (33, 44)

o7 : Sequence
i8 : w = "abcdefghij"

o8 = abcdefghij
i9 : w | w

o9 = abcdefghijabcdefghij
i10 : w || w

o10 = abcdefghij
      abcdefghij
i11 : 2^100

o11 = 1267650600228229401496703205376
i12 : 2.^100

o12 = 1.26765 10^30

o12 : RR
i13 : (36 + 1/8)^6

      582622237229761
o13 = ---------------
           262144

o13 : QQ
i14 : x1 = {1,a}

o14 = {1, a}

o14 : List
i15 : x2 = (2,b)

o15 = (2, b)

o15 : Sequence
i16 : x3 = [3,c,d,e]

o16 = [3, c, d, e]

o16 : Array
i17 : 1 .. 6

o17 = (1, 2, 3, 4, 5, 6)

o17 : Sequence
i18 : a .. f

o18 = (a, b, c, d, e, f)

o18 : Sequence
i19 : xx = {x1,x2,x3}

o19 = {{1, a}, (2, b), [3, c, d, e]}

o19 : List
i20 : #xx

o20 = 3
i21 : xx#0

o21 = {1, a}

o21 : List
i22 : xx#0#1

o22 = a

o22 : Symbol
i23 : join(x1,x2,x3)

o23 = {1, a, 2, b, 3, c, d, e}

o23 : List
i24 : append(x3,f)

o24 = [3, c, d, e, f]

o24 : Array
i25 : prepend(f,x3)

o25 = [f, 3, c, d, e]

o25 : Array
i26 : sum {1,2,3,4}

o26 = 10
i27 : product {1,2,3,4}

o27 = 24
i28 : f = (x,y) -> 1000 * x + y

o28 = f

o28 : Function
i29 : f = (x,y) -> (z := 1000 * x; z + y)

o29 = f

o29 : Function
i30 : f(3,7)

o30 = 3007
i31 : s = (3,7)

o31 = (3, 7)

o31 : Sequence
i32 : f s

o32 = 3007
i33 : sin 2.1

o33 = 0.863209

o33 : RR
i34 : apply(1 .. 10, i -> i^3)

o34 = (1, 8, 27, 64, 125, 216, 343, 512, 729, 1000)

o34 : Sequence
i35 : scan(1 .. 5, print)
1
2
3
4
5
i36 : apply(1 .. 10, i -> if even i then 1000*i else i)

o36 = (1, 2000, 3, 4000, 5, 6000, 7, 8000, 9, 10000)

o36 : Sequence
i37 : apply(1 .. 10, i -> (if even i then return 1000*i; -i))

o37 = (-1, 2000, -3, 4000, -5, 6000, -7, 8000, -9, 10000)

o37 : Sequence
i38 : i = 1; while i < 50 do (print i; i = 2*i)
1
2
4
8
16
32
i40 : for i from 1 to 10 list i^3

o40 = {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}

o40 : List
i41 : for i from 1 to 4 do print i
1
2
3
4
i42 : for i from 2 to 100 do if not isPrime i then break i

o42 = 4
i43 : for i from 2 to 100 when isPrime i do print i
2
3
i44 : print 2^100
1267650600228229401496703205376
i45 : (1 .. 5) / print;
1
2
3
4
5
i46 : << 2^100
1267650600228229401496703205376
o46 = stdio

o46 : File

  --  the standard input output file
i47 : << "the value is : " << 2^100
the value is : 1267650600228229401496703205376
o47 = stdio

o47 : File

  --  the standard input output file
i48 : << "A = " << 2^100 << endl << "B = " << 2^200 << endl;
A = 1267650600228229401496703205376
B = 1606938044258990275541962092341162602522202993782792835301376
i49 : "foo" << "A = " << 2^100 << endl << close

o49 = foo

o49 : File
i50 : get "foo"

o50 = A = 1267650600228229401496703205376

i51 : load "foo"
i52 : A

o52 = 1267650600228229401496703205376
i53 : input "foo"

i54 : A = 1267650600228229401496703205376

o54 = 1267650600228229401496703205376

i55 : i56 : R = QQ[x,y,z]

o56 = R

o56 : PolynomialRing
i57 : f = (x+y)^3

       3     2        2    3
o57 = x  + 3x y + 3x*y  + y

o57 : R
i58 : "foo" << f << close;
i59 : get "foo"

o59 =  3     2        2    3
      x  + 3x y + 3x*y  + y
i60 : toString f

o60 = x^3+3*x^2*y+3*x*y^2+y^3
i61 : "foo" << toString f << close;
i62 : get "foo"

o62 = x^3+3*x^2*y+3*x*y^2+y^3
i63 : value oo

       3     2        2    3
o63 = x  + 3x y + 3x*y  + y

o63 : R
i64 : vars R

o64 = | x y z |

              1       3
o64 : Matrix R  <--- R
i65 : toString vars R

o65 = matrix {{x, y, z}}
i66 : toExternalString vars R

o66 = map(R^{{0}}, R^{{-1}, {-1}, {-1}}, {{x, y, z}})
i67 : R = QQ[x,y,z]/(x^3-y)

o67 = R

o67 : QuotientRing
i68 : (x+y)^4

        2 2       3    4           2
o68 = 6x y  + 4x*y  + y  + x*y + 4y

o68 : R
i69 : f = new HashTable from { a=>444, Daniel=>555, {c,d}=>{1,2,3,4}}

o69 = HashTable{{c, d} => {1, 2, 3, 4}}
                a => 444
                Daniel => 555

o69 : HashTable
i70 : f#Daniel

o70 = 555
i71 : f#{c,d}

o71 = {1, 2, 3, 4}

o71 : List
i72 : Daniel = a

o72 = a

o72 : Symbol
i73 : f.Daniel

o73 = 555
i74 : f#?a

o74 = true
i75 : f#?c

o75 = false
i76 : x = set{1,a,{4,5},a}

o76 = Set {{4, 5}, 1, a}

o76 : Set
i77 : x#?a

o77 = true
i78 : peek x

o78 = Set{{4, 5} => 1}
          1 => 1
          a => 1
i79 : y = tally{1,a,{4,5},a}

o79 = Tally{{4, 5} => 1}
            1 => 1
            a => 2

o79 : Tally
i80 : y#a

o80 = 2
i81 : factor 60

       2
o81 = 2 3*5

o81 : Product
i82 : # factor 60

o82 = 3
i83 : apply(2 .. 1000, i -> # factor i)

o83 = (1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 3, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 1, 2, 3, 1, 2, 2, 3, 1, 2, 1, 2, 2, 2, 2, 3, 1, 2, 1, 2, 1, 3, 2, 2, 2, 2, 1, 3, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 3, 1, 2, 3, 2, 1, 2, 1, 3, 2, 2, 1, 3, 2, 2, 2, 2, 2, 3, 1, 2, 2, 2, 1, 3, 1, 1, 2, 3, 1, 3, 2, 2, 2, 2, 1, 3, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 2, 2, 3, 2, 3, 1, 2, 2, 2, 2, 2, 1, 2, 3, 2, 1, 3, 1, 3, 2, 2, 1, 3, 2, 2, 2, 2, 1, 3, 1, 3, 2, 2, 2, 3, 2, 2, 2, 3, 1, 2, 1, 2, 3, 2, 1, 3, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 4, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 1, 2, 2, 2, 1, 3, 1, 3, 3, 2, 1, 3, 2, 2, 2, 3, 1, 3, 1, 2, 1, 2, 2, 3, 2, 2, 2, 2, 1, 3, 2, 2, 3, 1, 1, 3, 2, 3, 2, 2, 1, 3, 2, 3, 2, 2, 1, 3, 1, 2, 3, 2, 2, 3, 1, 2, 2, 3, 1, 3, 1, 2, 3, 3, 2, 2, 1, 3, 2, 2, 1, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 1, 3, 2, 3, 1, 3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 4, 1, 2, 2, 2, 2, 3, 1, 2, 2, 3, 2, 3, 1, 2, 3, 2, 1, 3, 1, 3, 2, 2, 1, 3, 2, 2, 3, 2, 1, 3, 1, 2, 2, 3, 2, 3, 1, 2, 2, 3, 2, 3, 1, 3, 2, 2, 2, 3, 1, 3, 2, 2, 1, 2, 3, 2, 2, 2, 1, 4, 2, 2, 2, 2, 2, 3, 1, 2, 3, 2, 1, 3, 2, 2, 2, 3, 2, 3, 1, 3, 2, 2, 2, 3, 2, 2, 2, 3, 1, 4, 1, 2, 2, 2, 2, 3, 2, 2, 3, 3, 1, 2, 1, 3, 3, 2, 2, 3, 1, 3, 2, 3, 1, 3, 2, 2, 2, 2, 1, 3, 2, 2, 2, 2, 3, 3, 1, 2, 2, 3, 1, 4, 1, 2, 3, 2, 1, 3, 2, 3, 2, 2, 2, 3, 2, 3, 2, 2, 1, 3, 2, 2, 3, 2, 2, 2, 1, 2, 2, 3, 1, 3, 2, 3, 3, 2, 2, 3, 1, 2, 2, 2, 1, 3, 2, 3, 2, 2, 1, 4, 2, 1, 2, 2, 2, 3, 2, 3, 2, 3, 1, 3, 1, 2, 3, 2, 2, 3, 1, 3, 2, 3, 2, 3, 2, 2, 2, 2, 2, 3, 1, 2, 2, 2, 2, 4, 1, 2, 2, 3, 2, 3, 2, 2, 3, 2, 1, 3, 2, 3, 3, 2, 1, 3, 2, 2, 2, 2, 1, 4, 1, 3, 2, 3, 2, 2, 1, 2, 2, 3, 2, 3, 2, 2, 3, 2, 1, 3, 2, 3, 2, 2, 1, 3, 3, 2, 2, 3, 1, 3, 1, 3, 2, 2, 2, 3, 1, 2, 3, 3, 2, 3, 1, 2, 3, 3, 1, 3, 1, 3, 2, 2, 2, 3, 1, 2, 3, 2, 2, 4, 1, 2, 2, 2, 2, 3, 2, 3, 2, 2, 1, 3, 1, 3, 3, 3, 1, 2, 2, 3, 3, 2, 1, 3, 2, 2, 2, 3, 1, 4, 1, 2, 3, 2, 3, 3, 2, 2, 2, 3, 2, 3, 1, 2, 2, 2, 1, 3, 2, 3, 2, 3, 1, 3, 2, 2, 2, 2, 2, 4, 1, 2, 3, 2, 2, 3, 2, 2, 2, 3, 1, 3, 2, 2, 3, 2, 2, 3, 1, 3, 2, 2, 2, 4, 3, 2, 2, 2, 1, 3, 2, 2, 2, 2, 2, 3, 1, 3, 1, 3, 2, 3, 1, 2, 3, 2, 2, 3, 1, 3, 3, 3, 1, 3, 2, 2, 2, 3, 2, 3, 1, 2, 2, 3, 2, 3, 1, 2, 3, 3, 1, 3, 2, 2, 3, 2, 2, 2, 1, 4, 2, 2, 1, 3, 2, 2, 3, 2, 2, 4, 2, 3, 2, 2, 2, 3, 1, 2, 2, 3, 2, 3, 2, 2, 3, 2, 1, 4, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 1, 3, 1, 3, 2, 3, 2, 3, 2, 2, 3, 3, 1, 3, 1, 2, 3, 3, 1, 3, 1, 3, 2, 2, 2, 3, 2, 3, 2, 2, 1, 4, 1, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 3, 1, 3, 3, 2, 1, 4, 1, 3, 3, 2, 1, 2, 2, 2, 2, 3, 2, 4, 2, 2, 2, 3, 2, 3, 1, 2, 2, 3, 1, 3, 1, 3, 3, 2, 1, 3, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 3, 3, 2, 2, 3, 1, 2, 2, 4, 1, 3, 2, 2, 3, 2, 2, 3, 1, 3, 2, 2, 2, 4, 2, 2, 2, 2, 1, 4, 2, 2, 2, 2, 3, 3, 1, 3, 2, 3, 1, 3, 2, 2, 3, 3, 1, 3, 2, 3, 2, 3, 1, 3, 2, 2, 3, 2, 2, 3, 1, 3, 2, 2, 2, 4, 1, 2, 3, 3, 1, 2, 2, 2, 3, 2, 1, 3, 2, 3, 2, 2, 1, 3, 2, 3, 3, 3, 2, 4, 1, 2, 2, 3, 2, 3, 1, 2, 2, 2)

o83 : Sequence
i84 : tally oo

o84 = Tally{1 => 193}
            2 => 508
            3 => 275
            4 => 23

o84 : Tally
i85 : R.ideal

             3
o85 = ideal(x  - y)

o85 : Ideal of QQ [x, y, z]
i86 : ideal R

             3
o86 = ideal(x  - y)

o86 : Ideal of QQ [x, y, z]
i87 : code demark

o87 = -- ../../../m2/fold.m2:23
      demark = (s,v) -> concatenate between(s,v)
i88 : code(symbol **, RingMap, Module)

o88 = -- ../../../m2/ringmap.m2:294-298
      RingMap ** Module := Module => (f,M) -> (
           R := source f;
           S := target f;
           if R =!= ring M then error "expected module over source ring";
           cokernel f(presentation M));
i89 : code(ideal, QuotientRing)

o89 = -- ../../../m2/quotring.m2:7
      ideal QuotientRing := R -> R.ideal
i90 : denom = method();
i91 : denom QQ := x -> denominator x;
i92 : denom ZZ := x -> 1;
i93 : denom(5/3)

o93 = 3
i94 : denom 5

o94 = 1
i95 : 