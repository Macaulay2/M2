################################################################################
#
#  Github actions trigger (workflow script) for building Macaulay2
#
#    See https://help.github.com/en/actions for the documentation.
#
################################################################################

name: Build and Test Macaulay2

on:
  # trigger a test quick build at both PR (on dev)
  # and pushing to master (after merging or by Dan or Mike)
  push:
    branches:
      - master
      - development
      - global
      - release-1.16
  pull_request:
    branches:
      - master
      - development
  schedule:
    # cron time in UTC; set to 6a EDT
    - cron: '0 10 * * *'

defaults:
  run:
    working-directory: M2/BUILD/build

jobs:
  build:
    if: github.repository == 'Macaulay2/M2' || contains(github.ref, 'global')
    name: ${{matrix.os}}-${{matrix.build-type}}-${{matrix.compiler}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # eventually make this true
      matrix:
        os: [macos-latest, ubuntu-latest]
        build-type: [cmake, autotools]
        compiler: [clang10, gcc9, default]
#       language: [cxx17, cxx14]
        include:
          - compiler: gcc9
            cxx: g++-9
            cc: gcc-9
          - compiler: clang10
            cxx: clang++
            cc: clang
          - os: macos-latest
            make: gmake
          - os: ubuntu-latest
            make: make

    steps:
      - uses: actions/checkout@v1  # this set up the virtual environment, which has a whole lot
                                   # as of this writing: gcc9, clang10, cmake3.17, homebrew...

# ----------------------
#   Install missing tools and libraries using homebrew (macOS and Linux)
# ----------------------

      - name: Install missing dev tools (homebrew)
        id: get_dev_tools_brew
        if: ${{ runner.os == 'macOS' }}
        # autoconf, libtool are already in the virtual env
        run: |
          brew config
          brew install ninja pkg-config autoconf automake gnu-tar libtool yasm make

      - name: Install libraries (homebrew)
        id: get_dev_libraries_brew
        if: ${{ runner.os == 'macOS' }}
        run: |
          brew install boost libatomic_ops tbb libomp gmp bdw-gc glpk flint ntl ncurses eigen openblas cddlib

# ----------------------
#   Install missing tools and libraries using apt-get (Debian-based Linux only)
# ----------------------

      - name: Install missing dev tools (apt-get)
        id: get_dev_tools_aptget
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get install -y ninja-build yasm libtool-bin gfortran llvm-10 clang-10

      - name: Install libraries (apt-get)
        id: get_dev_libraries_aptget
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get install -y -q --no-install-recommends libncurses5-dev libreadline-dev \
            libgdbm-dev libatomic-ops-dev libboost-dev libboost-stacktrace-dev libxml2-dev \
            libgmp3-dev libmpfr-dev libglpk-dev liblapack-dev libeigen3-dev libopenblas-dev \
            libgc-dev libcdd-dev libgtest-dev libntl-dev gfan polymake w3c-markup-validator

# ----------------------
#   Steps common to all build variants
# ----------------------

      - name: Prepare build environment
        id: step_prepare
        run: |
          echo "::set-env name=CC::${{ matrix.cc }}"
          echo "::set-env name=CXX::${{ matrix.cxx }}"

      - name: Prepare build environment for Clang 10 on macOS
        id: step_prepare_clang10_macos
        if: matrix.compiler == 'clang10' && runner.os == 'macOS'
        run: |
          # Set PATH and LIBRARY_PATH for clang-10
          export PATH=`brew --prefix llvm`/bin:$PATH
          echo "::set-env name=PATH::$PATH"
          echo "::set-env name=LIBRARY_PATH::`llvm-config --libdir`"

# ----------------------
#   Configure and build M2 using cmake
# ----------------------

      - name: Configure Macaulay2 using CMake
        id: step_configure_cmake
        if: ${{ matrix.build-type == 'cmake' }}
        run: |
          cmake -S../.. -B. -GNinja -DUSING_MPIR=OFF -DVERBOSE=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_PREFIX_PATH=`brew --prefix libomp`

      - name: Save CMake artifacts
        uses: actions/upload-artifact@v2
        if: failure() && matrix.build-type == 'cmake'
        with:
           name: cmake-log-${{matrix.os}}-${{matrix.compiler}}
           path: M2/BUILD/build/CMakeFiles/CMake(Error.log|Output.log|CMakeTmp/CMakeLists.txt)

      - name: Build Macaulay2 using CMake (Ninja)
        id: step_build_cmake
        if: ${{ matrix.build-type == 'cmake' }}
        run: |
          cmake --build . --target build-libraries build-programs
          cmake --build . --target M2-core install-packages

      - name: Save CMake library artifacts
        uses: actions/upload-artifact@v2
        if: failure() && matrix.build-type == 'cmake'
        with:
           name: cmake-log-${{matrix.os}}-${{matrix.compiler}}
           path: M2/BUILD/build/libraries/*/build/config.log

# ----------------------
#   Configure and build M2 the old way
# ----------------------

      - name: Configure Macaulay2 using Autotools
        id: step_configure_autotools
        if: ${{ matrix.build-type == 'autotools' }}
        run: |
          ${{matrix.make}} -C ../.. get-tools
          ${{matrix.make}} -C ../.. all
          ../../configure --prefix=/usr --enable-download --enable-build-libraries="readline"

      - name: Save Autotools artifacts
        if: always() && matrix.build-type == 'autotools'
        uses: actions/upload-artifact@v1
        with:
           name: config-log-${{matrix.os}}-${{matrix.compiler}}
           path: M2/BUILD/build/config.log

      - name: Build Macaulay2 using Autotools (Make)
        id: step_build_autotools
        if: ${{ matrix.build-type == 'autotools' }}
        run: ${{matrix.make}}

# ----------------------
#   Run tests
# ----------------------

      - name: Run Tests (autotools, ubuntu)
        if: matrix.build-type == 'autotools' && matrix.os == 'ubuntu-latest'
        run: |
          ${{matrix.make}} check
          ${{matrix.make}} -C Macaulay2/html-check-links check
          ${{matrix.make}} validate-html
