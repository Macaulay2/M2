################################################################################
#
#  Github actions trigger (workflow script) for building Macaulay2
#
#    See https://help.github.com/en/actions for the documentation.
#
################################################################################

name: Build and Test Macaulay2

on:
  push:
    branches:
      - test/actions

defaults:
  run:
    working-directory: M2/BUILD/build

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.build-system }}-${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # eventually make this true
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
        build-system:
          - cmake
          - autotools
        compiler:
          - clang10
          - gcc9
          - xcode11
        # fine-tuning some configurations and excluding a few
        include:
          - compiler: gcc9
            cxx: g++-9
            cc: gcc-9
          - os: macos-latest
            compiler: clang10
            cxx: clang++
            cc: clang
          - os: ubuntu-latest
            compiler: clang10
            cxx: clang++-10
            cc: clang-10
        exclude:
          - os: macos-latest
            compiler: gcc9
          - os: ubuntu-latest
            compiler: xcode11

    steps:
      - uses: actions/checkout@v2

# ----------------------
#   Install missing tools and libraries using homebrew (macOS and Linux)
# ----------------------

      - name: Install requirements for macOS
        if: runner.os == 'macOS'
        run: |
          brew config
          brew install ccache ninja make pkg-config automake gnu-tar yasm
          brew install boost libatomic_ops ncurses openblas tbb eigen \
                       libomp bdw-gc gmp mpfr glpk flint ntl cddlib

# ----------------------
#   Install missing tools and libraries using apt-get (Debian-based Linux only)
# ----------------------

      - name: Install requirements for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y -q --no-install-recommends ccache ninja-build yasm libtool-bin clang-10
          sudo apt-get install -y -q --no-install-recommends libgdbm-dev libncurses5-dev libreadline-dev \
                   libatomic-ops-dev libboost-stacktrace-dev libxml2-dev libopenblas-dev libtbb-dev gfan \
                   libeigen3-dev w3c-markup-validator
          brew install libomp bdw-gc gmp mpfr glpk flint ntl cddlib

# ----------------------
#   Steps common to all build variants
# ----------------------

      - name: Prepare build environment
        run: |
          echo "::set-env name=CC::${{ matrix.cc }}"
          echo "::set-env name=CXX::${{ matrix.cxx }}"
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "::set-env name=PATH::/usr/lib/ccache:$PATH"
            sudo ln -s /usr/bin/make /usr/bin/gmake
          else
            export PATH=`brew --prefix ccache`/libexec:`brew --prefix llvm`/bin:$PATH
            echo "::set-env name=PATH::$PATH"
            # Necessary for clang-10 on macOS to find libomp
            echo "::set-env name=LIBRARY_PATH::`llvm-config --libdir`"
          fi
          # Necessary for gfan on Linux to find cddlib
          echo "::set-env name=LD_LIBRARY_PATH::`brew --prefix`/lib:$LD_LIBRARY_PATH"

      - uses: actions/cache@v2
        if: matrix.build-system == 'cmake' # TODO: remove when autotools is more efficient with space
        id: restore-cache
        with:
          path: |
            ~/.ccache
            ~/M2/BUILD/build/usr-host
          key: usr-host-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build-system }}-${{ hashFiles('**/cmake/*-libraries.cmake') }}
          restore-keys: |
            usr-host-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build-system }}-
            usr-host-${{ runner.os }}-${{ matrix.compiler }}-
            usr-host-${{ runner.os }}-

# ----------------------
#   Configure and build M2 using CMake
# ----------------------

      - name: Configure Macaulay2 using CMake
        if: matrix.build-system == 'cmake'
        run: |
          cmake -S../.. -B. -GNinja -DVERBOSE=ON -DUSING_MPIR=OFF \
            -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SYSTEM_PREFIX_PATH=`brew --prefix`

#      - name: Save CMake artifacts
#        uses: actions/upload-artifact@v2
#        if: matrix.build-system == 'cmake' && failure()
#        with:
#           name: cmake-log-${{matrix.os}}-${{matrix.compiler}}
#           path: M2/BUILD/build/CMakeFiles/CMake(Error.log|Output.log|CMakeTmp/CMakeLists.txt)

      - name: Build libraries using Ninja
        if: matrix.build-system == 'cmake' # && steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          cmake --build . --target build-libraries build-programs

#      - name: Save CMake library artifacts
#        uses: actions/upload-artifact@v2
#        if: matrix.build-system == 'cmake' && failure()
#        with:
#           name: cmake-log-${{matrix.os}}-${{matrix.compiler}}
#           path: M2/BUILD/build/libraries/*/build/config.log

      - name: Build Macaulay2 using Ninja
        if: matrix.build-system == 'cmake'
        run: |
          cmake --build . --target M2-core install-packages

# ----------------------
#   Configure and build M2 using Autotools
# ----------------------

      - name: Configure Macaulay2 using Autotools
        if: matrix.build-system == 'autotools'
        run: |
          gmake -C ../.. get-tools
          gmake -C ../.. all
          ../../configure --prefix=/usr --enable-download --enable-build-libraries="readline"

#      - name: Save Autotools artifacts
#        if: always() && matrix.build-system == 'autotools'
#        uses: actions/upload-artifact@v1
#        with:
#           name: config-log-${{matrix.os}}-${{matrix.compiler}}
#           path: M2/BUILD/build/config.log

      - name: Build Macaulay2 using Make
        if: matrix.build-system == 'autotools'
        run: |
          gmake

# ----------------------
#   Run tests
# ----------------------

      - name: Run Tests using CTest
        if: matrix.build-system == 'cmake' && matrix.compiler == 'clang10'
        run: |
          cmake --build . --target M2-unit-tests
          ctest -R "unit-tests"
          ctest -R "normal/" -E "command|schenck|threads|doc-links" -j4

      - name: Run Tests (autotools, ubuntu)
        if: matrix.build-system == 'autotools' && matrix.os == 'ubuntu-latest'
        run: |
          gmake check
          gmake -C Macaulay2/html-check-links check
          gmake validate-html
